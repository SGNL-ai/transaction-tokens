{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-07-07T00:15:15.083603+00:00",
  "repo": "oauth-wg/oauth-transaction-tokens",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "Nested TraTs",
      "description": "Nested Transaction Token related issues",
      "color": "3DE397"
    },
    {
      "name": "pre-adoption",
      "description": "",
      "color": "D449DC"
    },
    {
      "name": "PR57",
      "description": "",
      "color": "5319e7"
    },
    {
      "name": "IETF120-discuss",
      "description": "",
      "color": "f9d0c4"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOJt_WwM5orgPO",
      "title": "Should we allow Access Tokens to be included in a TraT",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/1",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Including Access Tokens may facilitate token theft.",
      "createdAt": "2023-06-14T07:21:15Z",
      "updatedAt": "2023-10-03T19:22:45Z",
      "closedAt": "2023-10-03T19:22:44Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Access tokens are not included in the transaction tokens. They are only present in the request from the external endpoint workload to the Transaction Token Service.",
          "createdAt": "2023-07-06T20:39:34Z",
          "updatedAt": "2023-07-06T20:39:34Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, do we have text to preclude that now?",
          "createdAt": "2023-07-07T08:21:21Z",
          "updatedAt": "2023-07-07T08:21:21Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Issue addressed in security considerations.",
          "createdAt": "2023-10-03T19:22:45Z",
          "updatedAt": "2023-10-03T19:22:45Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOJt_WwM5orirG",
      "title": "Document layout",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/2",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Perhaps have a shorter introduction section (first paragraph only) and move the rest to an Overview section to be consistent with other OAuth docs?",
      "createdAt": "2023-06-14T07:27:56Z",
      "updatedAt": "2023-08-01T01:09:40Z",
      "closedAt": "2023-08-01T01:09:40Z",
      "comments": []
    },
    {
      "number": 3,
      "id": "I_kwDOJt_WwM5osWt5",
      "title": "Security Consideration: Mutual Authentication of the TraT Request",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/3",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The requirement that clients must be pre-registered feels like it perpetuates the problem we see with workload identities, where the client identity may not be known ahead of time. This is not unlike the problems we see with wallets and the need for some way to let clients authenticate without being pre-registered. \r\n\r\nI wonder if we can remove this requirement and instead rely on some form of authentication where the trust is in the credential issuer. For example, with SPIFFE, there is an authority that issues the credential to the workload, so as long as the client presents a credential issued by the authority, it could be trusted (provided the authority is trusted). ",
      "createdAt": "2023-06-14T09:28:39Z",
      "updatedAt": "2023-10-03T19:23:45Z",
      "closedAt": "2023-10-03T19:23:44Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm thinking we should just rely on SPIFFE / SPIRE to solve this issue and not have to address it in the transaction tokens draft.",
          "createdAt": "2023-07-06T20:38:48Z",
          "updatedAt": "2023-07-06T20:38:48Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "There is other work in the pipeline to remove the need for client registration. Perhaps we should reference it here? \r\n\r\n1.https://vcstuff.github.io/draft-looker-oauth-attestation-based-client-authentication/draft-looker-oauth-attestation-based-client-authentication.html\r\n2.https://mattrglobal.github.io/draft-looker-oauth-client-id-scheme/draft-looker-oauth-client-id-scheme.html",
          "createdAt": "2023-07-07T08:23:46Z",
          "updatedAt": "2023-07-07T08:23:46Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Current spec removes client pre-registration and references SPIFFE - closing issue.",
          "createdAt": "2023-10-03T19:23:45Z",
          "updatedAt": "2023-10-03T19:23:45Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOJt_WwM5otiT0",
      "title": "Need to describe how claims are transcribed",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/4",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Describe how to show that claims are transcribed (namespaced) both withing and across trust domains. ",
      "createdAt": "2023-06-14T12:18:59Z",
      "updatedAt": "2023-10-03T19:25:21Z",
      "closedAt": "2023-10-03T19:25:21Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Would this be more of a concern for the identity chaining draft rather than the transaction tokens draft?",
          "createdAt": "2023-07-06T20:38:03Z",
          "updatedAt": "2023-07-06T20:38:03Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I was expecting to see it in the transaction token draft because I think this will be the more common use case - most workloads will operate within a trust boundary, and crossing it will be less frequent. We can the reference it in the Identity Chaing draft and make any tweaks we need to make there (hopefully we can just inherit it all from the transaction token draft).",
          "createdAt": "2023-07-07T08:20:38Z",
          "updatedAt": "2023-07-07T08:20:38Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "The azc claim in the latest draft describes how to represent transcribed claims. ",
          "createdAt": "2023-10-03T19:25:21Z",
          "updatedAt": "2023-10-03T19:25:21Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOJt_WwM5qklid",
      "title": "Short lived tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/6",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need additional guidance on batch or long-lived sessions - more than 30% of workloads run for more than 5 minutes and not solving for them is problematic. One approach is to remove the requirement on short lived or leave it to the implementor to decide what short lived means, Another is to recommend the use of standards like SSF/CAEP as a mitigation for long-lived tokens where the security properties matter. ",
      "createdAt": "2023-07-04T13:51:09Z",
      "updatedAt": "2023-10-06T16:21:25Z",
      "closedAt": "2023-10-06T16:21:25Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed that we cannot have a token lifetime that won't meet the needs of a significant number of workload requests.  We need a recommendation in the spec though in order to mitigate replay attacks. Just curious: In the \"30% workloads > 5 minutes\" statement, are we talking about a process that handles multiple requests, or 30% requests lasting more than 5 minutes?",
          "createdAt": "2023-07-06T20:37:30Z",
          "updatedAt": "2023-07-06T20:37:30Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't have that detail about the data point. From personal experience, I have seen batch jobs run for hours (23-24 hours in some cases). ",
          "createdAt": "2023-07-07T08:25:52Z",
          "updatedAt": "2023-07-07T08:25:52Z"
        },
        {
          "author": "naveencm4u1",
          "authorAssociation": "NONE",
          "body": "Will it not cause security issues If we keep the tokens active for a longer time in a batch job where someone internal can access those tokens?",
          "createdAt": "2023-07-07T19:02:05Z",
          "updatedAt": "2023-07-07T19:02:05Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Even in long lived batch jobs, individual RPCs will be short-lived. The external authorization token that impersonates or delegates authority from users can be long lived, in order to generate new Transaction Tokens",
          "createdAt": "2023-07-11T00:16:40Z",
          "updatedAt": "2023-07-11T00:16:40Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOJt_WwM5qkmFJ",
      "title": "TX=Transmit",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/7",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I wonder if we should just call these Transaction Tokens or TTs (although is some orgs TT = Trouble Ticket). Tx is commonly used to signify Transmit in the comms industry, and finding folks with that background will not be unusual in the IETF.",
      "createdAt": "2023-07-04T13:52:31Z",
      "updatedAt": "2023-08-01T01:09:28Z",
      "closedAt": "2023-08-01T01:09:28Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "From our Slack conversation, perhaps TxT Token?",
          "createdAt": "2023-07-07T08:26:44Z",
          "updatedAt": "2023-07-07T08:26:44Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOJt_WwM5qknIy",
      "title": "Robotic Prinicpal = Machine (or perhaps specifically Workload)?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/8",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It's been a challenge to find a consistent and commonly understood term for non-human identities (synthetic identities have their own meaning, machine identities implies a machine, device identities imply devices and workloads imply software). I like the Gartner taxonomy that classifies workload and device identities as subset of the machine identity realm. PErhaps we can use that term consistently and help frame the conversation in language the industry is adopting elsewhere?",
      "createdAt": "2023-07-04T13:55:15Z",
      "updatedAt": "2023-09-29T16:31:17Z",
      "closedAt": "2023-09-29T16:31:17Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed.",
          "createdAt": "2023-07-06T20:28:37Z",
          "updatedAt": "2023-07-06T20:28:37Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOJt_WwM5qkvYj",
      "title": "Tx-Token Service -> Tx-Token endpoint?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/10",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Is the Tx-Token Service really just another endpoint?",
      "createdAt": "2023-07-04T14:14:05Z",
      "updatedAt": "2023-08-01T01:11:21Z",
      "closedAt": "2023-08-01T01:11:21Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed [here](https://hackmd.io/@rpc-sec-wg/notes-20232107). Closing since we decided to call it a service in the end.",
          "createdAt": "2023-08-01T01:11:21Z",
          "updatedAt": "2023-08-01T01:11:21Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOJt_WwM5qkwwq",
      "title": "Security Considerations: Leaf vs Nested Tx-Tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/11",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Nested TraTs"
      ],
      "body": "Add section giving guidance on security properties of nested vs leaf tokens.",
      "createdAt": "2023-07-04T14:17:42Z",
      "updatedAt": "2023-10-03T19:34:14Z",
      "closedAt": "2023-10-03T19:34:14Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "No longer relevant with removal of nested tokens.",
          "createdAt": "2023-10-03T19:34:14Z",
          "updatedAt": "2023-10-03T19:34:14Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOJt_WwM5qkxiM",
      "title": "Leaf Tx-Token Claims",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/12",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "How is the workload identity captured in the leaf tokens and other subsequent tokens (sub_id is reserved for the original subject, how is the workload ids represented)?",
      "createdAt": "2023-07-04T14:19:13Z",
      "updatedAt": "2023-10-03T19:36:39Z",
      "closedAt": "2023-10-03T19:36:38Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in latest version of the spec",
          "createdAt": "2023-10-03T19:36:38Z",
          "updatedAt": "2023-10-03T19:36:38Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOJt_WwM5rZFsz",
      "title": "Txt token Header ",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/21",
      "state": "CLOSED",
      "author": "naveencm4u1",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I assume the token is sent in the header. Do we have any recommendations for the header name?",
      "createdAt": "2023-07-12T20:48:47Z",
      "updatedAt": "2024-02-01T22:48:57Z",
      "closedAt": "2024-02-01T22:48:57Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "In what situations would we have multiple tokens such that leveraging the Authorization header is not sufficient? My preference would be to leverage the Authorization header. Receiving entities can distinguish token types based on the JWT Header. ",
          "createdAt": "2023-09-05T18:56:46Z",
          "updatedAt": "2023-09-05T18:56:46Z"
        },
        {
          "author": "naveencm4u1",
          "authorAssociation": "NONE",
          "body": "@gffletch It is mainly in the transition phase. In our case, we want to pass both Access Token and Transaction Token until all the downstream are ready.",
          "createdAt": "2023-09-05T20:35:56Z",
          "updatedAt": "2023-09-05T20:35:56Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "This topic has come up again so re-opening the issue as it's something I think we need to address in the specification.",
          "createdAt": "2023-10-31T11:11:58Z",
          "updatedAt": "2023-10-31T11:11:58Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Duplicate of #49 ",
          "createdAt": "2023-11-14T00:12:51Z",
          "updatedAt": "2023-11-14T00:12:51Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "I believe, this issue can be closed as well?",
          "createdAt": "2024-01-30T11:54:40Z",
          "updatedAt": "2024-01-30T11:54:40Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOJt_WwM5sqqbb",
      "title": "tid and azc are introduced without calling out they're being defined",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/22",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should point out in 5.2.2 that \"tid\" and \"azc\" are being defined there. (From Dr. Kelley W Burgin)",
      "createdAt": "2023-07-26T20:36:02Z",
      "updatedAt": "2023-09-29T16:29:47Z",
      "closedAt": "2023-09-29T16:29:47Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOJt_WwM5sqrFw",
      "title": "tid claim is required (section 5.2.2), but what about calls that aren't app specific",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/23",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Dr. Kelley W Burgin\r\n",
      "createdAt": "2023-07-26T20:38:23Z",
      "updatedAt": "2023-10-06T16:21:14Z",
      "closedAt": "2023-10-06T16:21:14Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Kelly, can you clarify? The 'tid' claim; now 'txn' is just an identifier for the transaction.",
          "createdAt": "2023-09-27T13:35:51Z",
          "updatedAt": "2023-09-27T13:35:51Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Clarify this in the draft.",
          "createdAt": "2023-09-29T16:10:51Z",
          "updatedAt": "2023-09-29T16:10:51Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOJt_WwM5sqroH",
      "title": "What does the AS do with the values in \"azc\"?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/24",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Dr. Kelley W. Burgin\r\nSection 6.2: What does the AS do with the values in \u201cazc\u201d? Are they included in the transaction token? Can I put anything I want in \u201cazc\u201d?",
      "createdAt": "2023-07-26T20:40:16Z",
      "updatedAt": "2023-08-09T18:20:08Z",
      "closedAt": "2023-08-09T18:20:08Z",
      "comments": []
    },
    {
      "number": 30,
      "id": "I_kwDOJt_WwM5vVD62",
      "title": "azc content recommendations?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/30",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [],
      "body": "              Are there any recommendations on the type of data to include or not include in `azc`? Or is it up to the individuals to encrypt if there is any sensitive data in it?\r\n\r\n_Originally posted by @naveencm4u1 in https://github.com/SGNL-ai/transaction-tokens/pull/29#discussion_r1296765403_\r\n            ",
      "createdAt": "2023-08-25T23:51:30Z",
      "updatedAt": "2023-10-18T04:10:18Z",
      "closedAt": "2023-10-18T04:10:17Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I think details about the transaction itself (e.g. a RAR structure) could be put in the 'azc' but in their own sub-object. Generally, my thoughts have been the primary contents is the context of the transaction itself. Who requested the token, the purpose of the transaction, maybe other context that should be immutable (e.g. source IP address, device identifier, time of day, type of authorization token [bearer vs sender-constrained], ...)",
          "createdAt": "2023-09-05T18:53:39Z",
          "updatedAt": "2023-09-05T18:53:39Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I feel some of this information (requester, source IP, device ID) may be more interesting from an offline analysis point of view, rather than the transaction processing point of view. If so, the TraT service should just log this information instead of putting it into the TraT in order to prevent token bloat. If it is needed for transaction processing, it can always be included in the `azc` field.",
          "createdAt": "2023-09-25T18:45:03Z",
          "updatedAt": "2023-09-25T18:45:03Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So for me, a minimum set is...\nRequesting Entity (GW, Application, etc)\nPurpose of the transaction (to allow for \"downscoping\")\nSubject of the transaction (user/machine id)\n\nI do think that preserving other context of the transaction is useful from any risk engine that might be used by a downstream workload. But maybe we can separate that out. \n\n{\n  'iss'\n  ...\n  'azc'\n  'cxt' /* OPTIONAL: context of the transaction */\n  'azd' /* OPTIONAL: Authorization details */\n}\n\nThe 'azd' claim would allow for the additional information like what can be provided in RAR.\n\nThe 'cxt' claim would allow for capturing other contextual details of the transaction. As optional, it can be left out to reduce token bloat.",
          "createdAt": "2023-09-27T13:11:37Z",
          "updatedAt": "2023-09-27T13:11:37Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds reasonable. We have the subject `sub_id` claim. Should we add a sub-container or just have specific fields for the originator and purpose claims?",
          "createdAt": "2023-09-27T17:05:23Z",
          "updatedAt": "2023-09-27T17:05:23Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "It would be good to show how, in a replacement txn-token, the identity of the previous sub_id is preserved. The replacement token may have a new sub_id that represent the workload that requested the replacement token.",
          "createdAt": "2023-10-03T19:42:09Z",
          "updatedAt": "2023-10-03T19:42:09Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed in PR #43 ",
          "createdAt": "2023-10-18T04:10:17Z",
          "updatedAt": "2023-10-18T04:10:17Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOJt_WwM5xDCy8",
      "title": "Change tid claim name",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/31",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "PieterKas"
      ],
      "labels": [],
      "body": "Implementation feedback. The \"tid\" claim clashes with a claim commonly used in AAD for the tenant ID. Perhaps we can use an alternative like idt, txi, txnid, txn_id or tti?",
      "createdAt": "2023-09-14T13:50:16Z",
      "updatedAt": "2023-10-05T23:26:11Z",
      "closedAt": "2023-10-05T23:26:11Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in the identity chaining call. Recommendation is to use the 'txn' claim name as defined in RFC 8417.",
          "createdAt": "2023-09-15T16:15:05Z",
          "updatedAt": "2023-09-15T16:15:05Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Add reference to SET add RFC 8417",
          "createdAt": "2023-09-29T16:14:51Z",
          "updatedAt": "2023-09-29T16:14:51Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOJt_WwM5xLPpk",
      "title": "IANA considerations for txn_token type",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/32",
      "state": "CLOSED",
      "author": "arndt-s",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I believe we should add an IANA consideration and propose to register `urn:ietf:params:oauth:token-type:txn_token`.",
      "createdAt": "2023-09-15T16:48:29Z",
      "updatedAt": "2023-09-22T16:40:00Z",
      "closedAt": "2023-09-22T16:40:00Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for this email and adding the issues to GitHub. I will update the\r\nspec shortly.\r\n\r\nOn Fri, Sep 15, 2023 at 9:48\u202fAM Arndt Schwenkschuster <\r\n***@***.***> wrote:\r\n\r\n> I believe we should add an IANA consideration and propose to register\r\n> urn:ietf:params:oauth:token-type:txn_token.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/SGNL-ai/transaction-tokens/issues/32>, or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG2NFDHWDE7USMWVPDLX2SBGPANCNFSM6AAAAAA42CJ2YU>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n",
          "createdAt": "2023-09-15T22:58:17Z",
          "updatedAt": "2023-09-15T22:58:17Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOJt_WwM5xLQCF",
      "title": "IANA considerations for azc claim",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/33",
      "state": "CLOSED",
      "author": "arndt-s",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I believe we should add an IANA consideration to propose the registration of azc claim.\r\nA list of registered claims can be found here: https://www.iana.org/assignments/jwt/jwt.xhtml#claims",
      "createdAt": "2023-09-15T16:49:47Z",
      "updatedAt": "2023-09-22T16:40:00Z",
      "closedAt": "2023-09-22T16:40:00Z",
      "comments": []
    },
    {
      "number": 34,
      "id": "I_kwDOJt_WwM5xW0Ii",
      "title": "Clarification on the aud claim in Txn-Token format and examples",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/34",
      "state": "CLOSED",
      "author": "appsdesh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> A Trust Domain must have an identifier that is used as the aud (audience) value in Txn-Tokens. The format of this identifier is a universal resource identifier. Each Trust Domain has exactly one Txn-Token Service\r\n\r\nLet's clarify the `aud` claim in examples of [the Txn Token format section ](https://www.ietf.org/archive/id/draft-tulshibagwale-oauth-transaction-tokens-03.html#name-txn-token-format)",
      "createdAt": "2023-09-18T21:53:44Z",
      "updatedAt": "2023-11-14T00:11:43Z",
      "closedAt": "2023-11-14T00:11:43Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Decision: update the example.\r\n\r\nMove context out, add aud.",
          "createdAt": "2023-10-06T16:20:49Z",
          "updatedAt": "2023-10-06T16:20:49Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this issue has been resolved.",
          "createdAt": "2023-11-14T00:11:43Z",
          "updatedAt": "2023-11-14T00:11:43Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOJt_WwM5xW1Gr",
      "title": "How do internal services authorize the Transaction Tokens?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/35",
      "state": "CLOSED",
      "author": "appsdesh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Can we clarify in the examples how do internal services authorize the Transaction tokens?\r\n1. Are all the internal services bootstrapped with the token service public key?\r\n2. How do internal services know the boundaries of the trust domain or whether is it part of it?",
      "createdAt": "2023-09-18T21:57:27Z",
      "updatedAt": "2024-02-01T22:48:39Z",
      "closedAt": "2024-02-01T22:48:39Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "You can use something like SPIFFE to establish internal trust between services. The public key for the TraT service can be delivered as a part of the trust bundle.",
          "createdAt": "2023-09-21T23:22:51Z",
          "updatedAt": "2023-09-21T23:22:51Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So one though is that if the Transaction Token has an \u2018iss\u2019 claim then the public key should be discoverable. I don\u2019t think that has to be the only way to obtain the public key but it is one way systems could do it. This obviously doesn\u2019t need to be done on every request.",
          "createdAt": "2023-09-23T21:04:56Z",
          "updatedAt": "2023-09-23T21:04:56Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposal: make the iss claim mandatory and then reference existing mechanisms to discover public keys (maybe from jwks?). Also allow for other mechanisms to discover. General idea is to use the iss claim to discover the public key.",
          "createdAt": "2023-10-06T16:15:44Z",
          "updatedAt": "2023-10-06T16:15:44Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "I don't like to make iss claim mandatory. If all services operate within the same trust boundary, they already know their trusted authorization server and an iss claim would just add clutter and unnecessary data to the token. Also it would mean that one had to already trust some data within the transaction token before being able to validate its signature. This could lead to a rogue component to send requests to an internal service with carefully crafted transaction tokens with an iss pointing to another server the rogue component has control over. To prevent injecting rogue iss, the internal service would need to validate the provided iss value with a preconfigured list of allowed ones.\r\n\r\nIn our environment (trust boundary) where we are using internal tokens for transactions, the internal services have the authorization server's host name configured. Internal services can decide to pull (and cache) the jwks from the well-known url and validate the tokens locally or they can use the token introspection endpoint of the authorization server for validating the token. Validating the internal/transaction tokens with token introspection is useful for some sensitive operations and has the benefit that this validation can fail if for instance the access token the transaction token was derived from got revoked or the authentication context associated with the tokens got flagged.\r\n",
          "createdAt": "2023-10-26T07:52:17Z",
          "updatedAt": "2023-10-26T07:52:17Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "@obfuscoder 's point about all services in the same trust domain know the issuer and putting the `iss` field adds clutter is valid. We can make that field optional in the draft. I believe it is required right now. [Section 5.2.1](https://www.ietf.org/archive/id/draft-tulshibagwale-oauth-transaction-tokens-01.html#name-common-claims).\r\n\r\nEven if we made this claim optional, we should still note the point about validating the `iss` claim so that it prevents external issuers from being trusted by internal services in the Security Considerations section.",
          "createdAt": "2023-10-26T20:45:02Z",
          "updatedAt": "2023-10-26T20:45:02Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "As the required iss claim is now replaced with the required aud claim, there should be some validation guidelines for this parameter.\r\n\r\nIn the absence of the iss claim, discovery is not available and either SPIFFE or preconfigured URLs of the TTS and/or its JWKS is possible.",
          "createdAt": "2024-01-30T11:53:25Z",
          "updatedAt": "2024-01-30T11:53:25Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "we have made `iss` optional now, after much discussion, so closing this issue.",
          "createdAt": "2024-02-01T22:48:39Z",
          "updatedAt": "2024-02-01T22:48:39Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOJt_WwM5ysCEy",
      "title": "Do we still need the \"Leaf-TXN\" token concept.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/40",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "PieterKas"
      ],
      "labels": [],
      "body": "Now that nested tokens are removed, should we retain the leaf txn concept?\r\n\r\nSuggestion is to remove all mention of \"leaf-txn token\" throughout the doc.",
      "createdAt": "2023-10-03T13:22:37Z",
      "updatedAt": "2023-10-11T17:25:40Z",
      "closedAt": "2023-10-11T17:25:40Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Decision to remove.",
          "createdAt": "2023-10-06T16:10:17Z",
          "updatedAt": "2023-10-06T16:10:17Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this PR was merged. Closing the issue, but please reopen if I am mistaken.",
          "createdAt": "2023-10-11T17:25:40Z",
          "updatedAt": "2023-10-11T17:25:40Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOJt_WwM50J9VG",
      "title": "It would be good to show how, in a replacement txn-token, the identity of the previous sub_id is preserved. The replacement token may have a new sub_id that represent the workload that requested the replacement token.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/44",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "pre-adoption"
      ],
      "body": "              It would be good to show how, in a replacement txn-token, the identity of the previous sub_id is preserved. The replacement token may have a new sub_id that represent the workload that requested the replacement token.\r\n\r\n_Originally posted by @PieterKas in https://github.com/SGNL-ai/transaction-tokens/issues/30#issuecomment-1745613590_\r\n            ",
      "createdAt": "2023-10-18T04:09:25Z",
      "updatedAt": "2024-03-25T23:32:34Z",
      "closedAt": "2024-03-25T23:32:34Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this since it was addressed in PR #71?",
          "createdAt": "2024-03-19T22:38:51Z",
          "updatedAt": "2024-03-19T22:38:51Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOJt_WwM51GAj8",
      "title": "\"sender constrained\" language needs improvement",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/48",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The language in section [Sender Constrained Tokens](https://www.ietf.org/archive/id/draft-tulshibagwale-oauth-transaction-tokens-01.html#name-sender-constrained-tokens) needs to refer to the RFC and specify how to use them with Txn-Tokens",
      "createdAt": "2023-10-26T23:19:03Z",
      "updatedAt": "2024-02-02T16:49:42Z",
      "closedAt": "2024-02-02T16:49:42Z",
      "comments": []
    },
    {
      "number": 49,
      "id": "I_kwDOJt_WwM51GBCr",
      "title": "Using Txn-Tokens securely",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/49",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pre-adoption"
      ],
      "body": "We need to add in the [Security Considerations](https://www.ietf.org/archive/id/draft-tulshibagwale-oauth-transaction-tokens-01.html#name-security-considerations) section, information on how services may use Txn-Tokens securely, by possibly using them in conjunction with SPIFFE or other service-to-service security mechanisms.\r\n\r\n(based on feedback by Kai Lehmann (@obfuscoder))",
      "createdAt": "2023-10-26T23:21:58Z",
      "updatedAt": "2024-01-29T19:00:18Z",
      "closedAt": "2024-01-29T19:00:18Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "#21 talks about the same issue, but this is a broader statement.",
          "createdAt": "2023-11-14T00:14:05Z",
          "updatedAt": "2023-11-14T00:14:05Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "We will use a new header named \"Txn-Token\"",
          "createdAt": "2024-01-19T17:41:24Z",
          "updatedAt": "2024-01-19T17:42:49Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOJt_WwM52d2ec",
      "title": "Separate transaction tokens from JWT",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/50",
      "state": "OPEN",
      "author": "jricher",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To me, the real value here is the semantics around the payload, and less directly tied to the JWT format as its container. In particular, it seems like the payload could benefit from some of the disclosure capabilities of things like SD-JWT to allow the system to mask certain values from some parties within the trust domain.\r\n\r\nConsequently, perhaps the document should focus on the payload and semantics, or explicitly show ties to both JWT and SD-JWT (and maybe CWT and others?) from the payload definition.",
      "createdAt": "2023-11-10T12:29:35Z",
      "updatedAt": "2024-03-22T13:28:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "That is an interesting restructuring to the doc. Basically a conceptual section and then bindings to particular formats allowing for profiles to other encodings? Is that the general idea?",
          "createdAt": "2023-11-11T04:28:00Z",
          "updatedAt": "2023-11-11T04:28:00Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "Are we considering opaque token formats as an alternative as well? Those formats could not be verified (e.g. signature check) by the workloads locally, but would require incorporating Token Introspection to get the data. For performance reasons, the format should at least be defined as self contained and verifiable locally. CWT as well as (SD-)JWT would have these properties. In the IETF meeting protobuf was mentioned. As far as I know, protobuf does not have this property, so I don't see it as a fitting candidate.\r\n\r\nWe also need to consider interoperability. If the spec allowed for multiple formats (or even leaves the format out of the specification), generic libraries/frameworks to implement the protocol would need to support not just one but a lot of formats or even make the format (serialization/deserialization) pluggable. Although this might be a good idea anyway, it tends to be more complex.\r\n\r\nIn regards to selective disclosure: The purpose of the transaction token is to pass it along the transaction call chain. So if there is specific data of the original presented Access Token not to be disclosed in the transaction token, the TTS would simply not add it in the transaction token when issuing it. Although a workload can choose to exchange the transaction token for another one, the purpose was to narrow the scope to further limit the access which the new transaction token could be used for. At this point the new transaction token could contain even less information than the original transaction token. I don't think that there should be more information disclosed at this point. That's why I don't think that SD-JWTs would have an application here.\r\n\r\nOn the other hand, I do see an application for a transaction token which contains specific information for specific workloads along the call chain. I can see some similarities to Rich Authorization Requests (RAR) where there can be PII/resource identifiers in the transaction token which should only be visible to some workloads even if the transaction token is passed along through all participating workloads.\r\n",
          "createdAt": "2024-03-22T13:28:46Z",
          "updatedAt": "2024-03-22T13:28:59Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "I_kwDOJt_WwM52iZ-T",
      "title": "Should the azd claim be mandatory or optional",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/52",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pre-adoption"
      ],
      "body": "I\u2019m wondering if we should move the `azd` claim to the Optional section as there may be some cases where it\u2019s not required. I\u2019d hate for systems to have to process and empty `azd` object. We might be able to leave it in the MUST category if we add text that says if there are no `azd` claims then the object MUST NOT be included in the transaction token.",
      "createdAt": "2023-11-11T04:51:17Z",
      "updatedAt": "2024-02-01T22:33:10Z",
      "closedAt": "2024-02-01T22:33:10Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Since we no longer have an optional and mandatory section, I shall close this issue. Please reopen if you think this needs to be addressed.",
          "createdAt": "2024-02-01T22:33:10Z",
          "updatedAt": "2024-02-01T22:33:10Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOJt_WwM529ErC",
      "title": "Transaction Tokens for S2S calls",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/53",
      "state": "CLOSED",
      "author": "dteleguin",
      "authorAssociation": "NONE",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "> Cryptographically protected Txn-Tokens ensure that downstream workloads cannot make unauthorized modifications to such information, and cannot make spurious calls without the presence of an external trigger.\r\n\r\nWhat about legitimate (non-spurious) calls without the presence of an external trigger?\r\n\r\nA transaction might be initiated by an internal component (e.g. triggered by a scheduler). In this case, there will be no external context (`req_ctx`) and no user (human) identity. However, transaction details (`purp` and `azd`) might still be relevant.\r\n\r\nCan TX Tokens cover this use case as well? The benefits will be unified token issuance and verification process for both external- and internal-initiated transactions. The only alternative in the OAuth world I could think of is the Client Credentials Grant, but it doesn't specify how to push transaction-specific data. Also, the result will be an Access Token and not a Txn-Token, which assumes that downstream workloads must be able to understand both.\r\n\r\nMaybe slightly unrelated, but it is also a bit unclear how should we communicate the desired `azd` and `purp` to the Txn-Token Service? Or is it assumed that everything should be derived from the external token + `rctx`?",
      "createdAt": "2023-11-15T22:58:21Z",
      "updatedAt": "2024-06-14T15:27:25Z",
      "closedAt": "2024-06-14T15:27:25Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Transaction Tokens can definitely be used with legitimate calls that don't have an external trigger. The key element from an authorization perspective, is \"who is allowed to request an transaction token\" and \"for what purpose(s)\". If any service can request a transaction token, then it's important to limit the scope of how that transaction token can be used. In other words, we wouldn't want the logging service to be able to request a transaction service for the purpose of transferring crypto from a user's account.\r\n\r\nI would argue that there is still a `req_ctx` in this case, it may just contain different claims. I would expect downstream systems to want to know the originating workload that requested the transaction token.\r\n\r\nAs for `azd`, I agree that there are use cases where that needs to be specified to the Transaction Token service.\r\n\r\nGreat points on areas where we need to enhance the specification.",
          "createdAt": "2023-12-07T14:46:42Z",
          "updatedAt": "2023-12-07T14:46:42Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "Reviewing this issue, I can see a relation with #62. As it has been established that requesting Txn-Tokens without an external trigger is needed. however, the current spec requires an Access token to be presented in the subject_token parameter and the question is, how an internal batch process would obtain this. @dteguin (and me in the related issue #62) mentioned Client credentials grant for obtaining the AT. However, client credentials grant based ATs may not be related to users referred to with the sub claim, so it may be a challenge to issue Txn-Tokens with a user-related sub when the client credentials grant based AT does not contain one.\r\n\r\nIn #62 I gave an example where a batch processor might be able to present an expired Txn-Token, but there are still scenarios where no AT can be presented in the subject_token parameter or where the presented subject_token does not contain the information necessary to fill and issue the Txn-Token. This information needs to be provided somehow to the TTS. If this information must be part of the subject_token or somehow be obtainable by the TTS via parts of the subject_token content, it should at least be mentioned in the spec.\r\n\r\nPersonally, I'd like to see an option where the TTS can be called without a subject_token as input and instead providing the necessary information via additional parameters (e.g. sub within the req_ctx). It goes without saying, that this type of Token issuance should only be allowed to a very limited set of authenticated clients which have a special trust relationship with the TTS.",
          "createdAt": "2024-01-30T11:49:00Z",
          "updatedAt": "2024-01-30T11:49:00Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that the `subject_token` can be an optional field in the TraT request. We should update the spec to say so. We can discuss this issue on Friday 2/2",
          "createdAt": "2024-02-01T23:44:44Z",
          "updatedAt": "2024-02-01T23:44:44Z"
        },
        {
          "author": "dteleguin",
          "authorAssociation": "NONE",
          "body": "As per RFC 8639, `subject_token` and `subject_token_type` are [required](https://datatracker.ietf.org/doc/html/rfc8693#name-request). Do you think we can \"override\" that in this spec @tulshi ?",
          "createdAt": "2024-02-01T23:49:30Z",
          "updatedAt": "2024-02-01T23:49:30Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "We could agree on some placeholder to avoid being non-compliant with the RFC8693 (in the event that there is no input token)",
          "createdAt": "2024-02-02T00:06:41Z",
          "updatedAt": "2024-02-02T00:06:41Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "There is this \"N_A\" which could be reused here?",
          "createdAt": "2024-02-02T05:51:22Z",
          "updatedAt": "2024-02-02T05:51:22Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm still wondering if we'd want to send in a subject_token all the time rather than have this spec override the Token Exchange spec. We need a 'sub' as part of the TraT so why not use the subject_type to provide it. The `subject_token` value  could be something simple like a String and then the subject_token_type could be urn:...:workload_id",
          "createdAt": "2024-02-20T19:48:04Z",
          "updatedAt": "2024-02-20T19:48:04Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Are the updates to draft 01 sufficient to close this issue? or do we need additional text?",
          "createdAt": "2024-03-19T22:40:16Z",
          "updatedAt": "2024-03-19T22:40:16Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "@gffletch The current draft mentions that the subject_token represents the subject and it could either be a token or simple string. However, the current draft does not say, what should be the subject_token_type if the subject_token contains a simple string. My suggestion would be to register a URN at IANA for this and name it urn:ietf:params:oauth:token-type:subject\r\n",
          "createdAt": "2024-03-22T16:53:03Z",
          "updatedAt": "2024-03-22T16:53:23Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@obfuscoder My original intent was to make this out of scope for the specification as the only entity that needs to understand a subject_token_type value is the Transaction Token Service. If the deployment wants to define a urn:x-example:params:oauth:token-type:email to identify a subject_token value of \"foo@bar.com\" then that is totally fine. I don't think this is an area where specification is required. \r\n\r\nI'm open to options and ways to better support use cases where transaction tokens are needing to be \"minted\" without any existing \"access token\".\r\n\r\nOne such use case could be a service that uses mTLS to unique identify a user (e.g. per user certificate) and then wants to specify that user as the subject of the transaction token. How does the requesting workload specify the \"subject\" (CN of the certificate?) to the Transaction Token Service?",
          "createdAt": "2024-03-29T19:18:31Z",
          "updatedAt": "2024-03-29T19:18:31Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the self-signed token addition to the draft addresses this issue. Please reopen if not addressed fully.",
          "createdAt": "2024-06-14T15:27:25Z",
          "updatedAt": "2024-06-14T15:27:25Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOJt_WwM55gcQk",
      "title": "RFC 9493 and sub_id formats",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/56",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "PR57"
      ],
      "body": "I suspect in many cases the AS that issues an access_token used to obtain an Txn-Token is going to be different than the Transaction Token Service. In that context, the issuer of the 'subject' of the transaction token is different than the issuer of the transaction token itself. \r\n\r\nSection 3.2.3 of RFC 9493 allows for the specification of an issuer and sub within the `sub_id` object. \r\n\r\nShould we require this format? or just leave out of scope of the specification what values are present in the `sub_id` claim of the transaction token?",
      "createdAt": "2023-12-12T21:04:09Z",
      "updatedAt": "2024-02-01T22:47:02Z",
      "closedAt": "2024-02-01T22:47:02Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would definitely not require that format. \r\n\r\nAnd would again suggest that RFC 9493 isn't needed in the Txn-Token context and [JWT's subject](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.2) good enough. ",
          "createdAt": "2023-12-20T21:41:16Z",
          "updatedAt": "2023-12-20T21:41:16Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "My concern with relying on the JWT's subject is that the Transaction Token is issued by the Transaction Token Service which is potentially different than the AS that say issued the access token from which the `sub` claim is determined. In that context, I think the Transaction Token should carry the issuer of the `sub` claim which means the default `sub` and `iss` claims of the JWT are not sufficient.\r\n\r\nOr if the entity requesting the Transaction token is the service that receives inbound mail, and that service wants a transaction token with a purpose of `mail.inbox.delivery`, is the Transaction Token Service the correct issuer of the `sub` which is an email address?",
          "createdAt": "2023-12-20T22:16:47Z",
          "updatedAt": "2023-12-20T22:16:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I feel like there might be an undue emphasis on a relationship between `iss` and `sub` that doesn't truly exist. RFC7519 only mentions uniqueness in the context of an issuer https://www.rfc-editor.org/rfc/rfc7519#section-4.1.2 but not ownership or correctness or semantic meaning. \r\n",
          "createdAt": "2023-12-21T00:12:05Z",
          "updatedAt": "2023-12-21T00:12:36Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "In the context of OpenID and id_tokens there is a clear relationship between the `iss` and the `sub` such that the globally unique identification is the combination of `iss` and `sub`. I've always viewed the relationship of those two claims in that light. Maybe that is an OpenID Connect centric view.",
          "createdAt": "2023-12-21T00:57:54Z",
          "updatedAt": "2023-12-21T00:57:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I am somewhat familiar with OpenID Connect ;) But this isn't OpenID Connect. With a Transaction Token the subject just needs to be identified within a single trust domain. ",
          "createdAt": "2023-12-21T13:56:46Z",
          "updatedAt": "2023-12-21T13:56:46Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So that assumes that the `sub` claim MUST be unique within the single trust domain as identified by the `aud` claim.  This might require the Transaction Token Service (TTS) to do some sort of identifier transformation as well as requiring both the AS and the TTS to both be authoritative for the `sub` claim value. This is easy if the AS is managing the transaction token request endpoint but if the TTS is it's own service and deployed in a distributed way, would that still be true?\r\n\r\nI can see the TTS being authoritative for the single trust domain but not necessarily for the `sub` identifier. However, I'm ok with moving in the direction you are suggesting Brian; I just want to make sure we aren't prohibiting some deployments by making that simplification.",
          "createdAt": "2023-12-21T15:41:55Z",
          "updatedAt": "2023-12-21T15:41:55Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "From discussion...\n\n1. 'iss' claim is optional\n2. be clear that there is no relationship between iss and sub claim\n3. sub is unique within context of the 'aud' or trust domain\n4. go back just supporting the `sub` claim (no sub_id)",
          "createdAt": "2024-01-19T17:37:18Z",
          "updatedAt": "2024-01-19T17:37:18Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Added a new commit to PR #57 to address this issue.",
          "createdAt": "2024-01-24T13:21:17Z",
          "updatedAt": "2024-01-24T13:21:17Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "A few months ago, I also suggested to support the sub claim as per JWT RFC. As the current spec has replaced sub_id with sub, I appreciate that the sub claim is supported now.",
          "createdAt": "2024-01-30T11:26:38Z",
          "updatedAt": "2024-01-31T07:08:56Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Kai,\r\nThanks so much for your input in this process.\r\n\r\nAtul\r\n\r\nOn Tue, Jan 30, 2024 at 3:26\u202fAM Kai Lehmann ***@***.***>\r\nwrote:\r\n\r\n> A few months ago, I also suggested to support the sub claim as per JWT\r\n> RFC. As the current spec has replaced sub_id with sub. I appreciate that\r\n> the sub claim is supported now.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/issues/56#issuecomment-1916638607>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG5Y4DBPQOKJBPKGHRLYRDKHTAVCNFSM6AAAAABASDKZWWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSMJWGYZTQNRQG4>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n",
          "createdAt": "2024-01-31T00:51:53Z",
          "updatedAt": "2024-01-31T00:51:53Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Since we have removed sub_ids now, I will close this issue.",
          "createdAt": "2024-02-01T22:47:02Z",
          "updatedAt": "2024-02-01T22:47:02Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOJt_WwM56AT6_",
      "title": "Authorization details presentation and processing",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/58",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "PR57"
      ],
      "body": "PR #57 raised a number of issues around processing of authorization details\r\n\r\n1. How are these details determined by the Transaction Token Service (i.e. where do they come from)?\r\n2. Should all the `azd` claims be visible to all workloads? or should they be restricted to a subset of workloads?\r\n3. Who is authoritative for specifying the claims of the `azd` object\r\n",
      "createdAt": "2023-12-18T15:20:21Z",
      "updatedAt": "2024-02-01T22:32:29Z",
      "closedAt": "2024-02-01T22:32:29Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Some thoughts:\r\n\r\n1.  I think the spec should be un-opinionated about how the TraT service generates the value of `azd` claim. I can see in some instances that the requester has more control over what goes into the claim, and in some cases, the TraT service has more control.\r\n2. A TraT service could implement selective disclosure, although we could recommend in the spec that one should implement it by encrypting certain fields. Stating this makes the actual mechanism for selective disclosure outside the scope of the spec.\r\n3. I believe the TraT service MUST be authoritative for the claims of the `azd` object, because it is signing the TraT.",
          "createdAt": "2023-12-18T17:42:51Z",
          "updatedAt": "2023-12-18T17:42:51Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding (1) -- I think we still need a way for the client to pass in data to the TTS that it can use to generate the values. Even if how all that works is out of scope for the specificatio.\r\n\r\nRegarding (2) and (3) -- I'm ok with leaving the rules out of scope for the specification. The TTS will be authoritative for the resulting `azd` object and whether it should be protected in some way or not.\r\n\r\nI am curious to hear from others as to their thoughts.",
          "createdAt": "2023-12-18T18:31:58Z",
          "updatedAt": "2023-12-18T18:31:58Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggestion to rename `authz_details` to `request_details` and then add a processing rule to the effect of... \"The TTS SHOULD propagate the data from the `request_details` object into claims in the `azd` object as authorized by the TTS authorization policy for the requesting client\"",
          "createdAt": "2024-01-12T17:26:50Z",
          "updatedAt": "2024-01-12T17:26:50Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been fixed AFAIK. Please reopen the issue if it hasn't been fixed by George's PR.",
          "createdAt": "2024-02-01T22:32:29Z",
          "updatedAt": "2024-02-01T22:32:29Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOJt_WwM56AUh2",
      "title": "Use of base64url encoding for request_context and authz_details",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/59",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR57"
      ],
      "body": "Should we call out a specific encoding for these JSON objects? ",
      "createdAt": "2023-12-18T15:21:31Z",
      "updatedAt": "2024-01-12T17:55:08Z",
      "closedAt": "2024-01-12T17:55:07Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems fine, re-open if we discover issues with the current PR language",
          "createdAt": "2024-01-12T17:55:07Z",
          "updatedAt": "2024-01-12T17:55:07Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOJt_WwM56AVNO",
      "title": "Use of `actor_token` and `actor_token_type`",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/60",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "PR57"
      ],
      "body": "Should we allow the use of `actor_token` and `actor_token_type` to be used as a means of client authentication for the Transaction Token Service? If not, should explicitly prohibit the use of these parameters in the profile of the Token Exchange spec.",
      "createdAt": "2023-12-18T15:22:56Z",
      "updatedAt": "2024-02-01T22:31:14Z",
      "closedAt": "2024-02-01T22:31:14Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Since RFC8693 (Token Exchange) refers to the `actor_token` as \"A security token that represents the identity of the acting party\", we should not use it in the TraT request. I thought we wanted to have some way to convey the inbound token to the TraT service, and that's why we were using `actor_token`, but that is inconsistent with RFC8693. I think we should neither require nor disallow the use of `actor_token` because some implementations may want that for client auth, and some implementations may want to do something else (e.g. mTLS) for client auth.",
          "createdAt": "2023-12-18T17:53:07Z",
          "updatedAt": "2023-12-18T17:53:07Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "This is kind of what the spec says today. It's not required and up to the implementation. It is just referenced as an example. However, I'm fine removing the example and just being silent in the spec on the topic.",
          "createdAt": "2023-12-18T18:18:37Z",
          "updatedAt": "2023-12-18T18:18:37Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Recommendation to update example and be silent on use of `actor_token` and `actor_token_type`. Add a section to Security Considerations to talk about client authentication and add some non-normative examples.",
          "createdAt": "2024-01-12T17:48:13Z",
          "updatedAt": "2024-01-12T17:48:13Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Removed the additional text regarding possible client authentication methods and just left it that the client MUST authenticate itself to the Transaction Token Service and that the specific client authentication method is out of scope for this specification.",
          "createdAt": "2024-01-24T13:39:37Z",
          "updatedAt": "2024-01-24T13:39:37Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOJt_WwM56AWSf",
      "title": "How is the `purp` claim of the Txn-Token defined?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/61",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "PR57"
      ],
      "body": "In PR #57, the token exchange `scope` parameter is profiled to carry the purpose or intent of the transaction and its value is copied into the `purp` claim of the resulting Txn-Token. \r\n\r\nIs this how we want to handle the 'purp' claim?",
      "createdAt": "2023-12-18T15:25:19Z",
      "updatedAt": "2024-02-01T22:30:57Z",
      "closedAt": "2024-02-01T22:30:57Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I propose that the draft should allow value of the `scope` claim in the TraT request be independent of the `purp` claim in the TraT, because the requesting service may not know sufficient details about how the TraT is actually going to be used. For example, the requester may say the `scope` is \"buy stock\", whereas the `purp` claim could have a value like \"equity trade\"",
          "createdAt": "2023-12-18T17:47:43Z",
          "updatedAt": "2023-12-18T17:47:43Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, so allow the TTS to transform the input scope to the appropriate value (if necessary). I'm ok with that.",
          "createdAt": "2023-12-18T18:28:57Z",
          "updatedAt": "2023-12-18T18:28:57Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Recommended change that the TTS MUST take the value of the `scope` parameter to determine the `purp` claim of the TraT.",
          "createdAt": "2024-01-12T17:32:59Z",
          "updatedAt": "2024-01-12T17:32:59Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on this feedback, the `purp` claim is being made REQUIRED.",
          "createdAt": "2024-01-24T13:35:18Z",
          "updatedAt": "2024-01-24T13:35:18Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOJt_WwM58ELrW",
      "title": "Long-living Access Token needed for internal batch processes/offline tasks?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/62",
      "state": "OPEN",
      "author": "obfuscoder",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current spec states:\r\n\r\n\"Even for long-running \"batch\" jobs, a longer lived access token should be used to initiate the request to the batch endpoint. It then obtains short-lived Txn-Tokens that may be used to authorize the call to downstream services in the call-chain.\"\r\n\r\nI assume the reasoning behind this is that there would be no need to define a Txn-Token Request without an original Access Token. However, I think that creating long-living Access Tokens just for the purpose of exchanging them for short-lived Txn-Tokens and then throwing them away can be considered wasteful (energy costs). Every internally originating job would need at least two calls instead of just one to obtain the Txn-Token.\r\n\r\nKeeping those long-living Access Tokens around to re-use them for longer time is usually not useful for batch processes as those processes operate on a lot of user accounts in quick succession. Maintaining all those Access Tokens in memory is often not feasible. Neither is a storage system. I also think that using long-living Access Tokens in this scenario can add security risks. Those Access Tokens could leak and another party could use them to create Txn-Tokens or access resources the Access Token was meant for.\r\n\r\nIn our own implementation of a Txn-Service, the Txn-Service (Token Exchange) is also providing the Token endpoint and allows specific internal clients to use the Client Credentials Grant Type (mTLS client certificates) to obtain Txn-Tokens right away. The necessary input parameters are essentially a combination of the Token Request based on Client Credentials Grant and Token Exchange with a Txn-Token profile.\r\n\r\nIs it possible to extend the Txn-Token Service interface to allow Txn-Token Requests without the Access Token as input? This would essentially mean to define a Txn-Token profile for the Token endpoint in addition to the Token Exchange protocol.",
      "createdAt": "2024-01-15T08:11:42Z",
      "updatedAt": "2024-03-22T16:47:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So a couple of thoughts here:\r\n\r\n1. I believe the Txn-Token Service (TTS) must be able to issue Txn-Tokens without a previously issued access_token. Think about a use case where email is being delivered to a mail box. SMTP does not carry the access token that authorized the sending of the email. In that context, the in-bound email server needs to be able to request a Txn-Token for the purpose of delivering the email to the specified inbox.\r\n2. The general intent for keeping Txn-Tokens very short lived is to remove the need for revocation. Revocation is difficult for any token system (see the issuer-holder-verifier efforts in this space). Given that the vast majority of transactions complete in a very short timeframe, keeping the life-time of the Txn-Token short makes a lot of sense.\r\n3. There are some edge cases where a longer lived Txn-Token may be beneficial or required.  Say for instance a user asks for their account to be deleted (GDPR) and the Txn-Token needs to live for multiple days? even though the underlying identity system may have cleaned up the user identifier data. That said, these edge cases should be vetted very carefully as there is a security risk if a Txn-Token lives for a long time and hence can be replayed potentially in compromising ways.",
          "createdAt": "2024-01-29T16:43:21Z",
          "updatedAt": "2024-01-29T16:43:21Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "The use cases you mention are pretty much what we had to implement.\r\n\r\n1. For incoming mails we have a mail delivery agent which wants to use the mail storage system service to store the mail in the user mailbox. In order to write to the mailbox of a user, the delivery agent needs a Txn-Token with the sub of the user. The delivery agent asks the TTS about a Txn-Token and presents its client credentials and the mail address of the recipient/user. The TTS allows issuing Txn-Tokens to the delivery agent. There is no long-living access token involved. The issued Txn-Token is short lived (1 minute in our deployments).\r\n\r\n3. Whenever a user cancels their contract, we have to keep the data for some time (number of days depending on type of data, legal restrictions, etc.) after the delete operations are performed. The delayed delete operation is done by batch processes. Now, instead of creating and storing long-living access tokens which could be leaked and abused elsewhere, we decided to retain the short-lived Txn-Tokens and allow only those batch processes to ask the TTS to issue new Txn-Tokens for already expired Txn-Tokens to perform the actual delete operation which requires a valid and not expired Txn-Token when calling the storage system services.\r\n\r\nSo my argument is against using (and potentially abusing) long-living access tokens, and instead for allowing expired Txn-Tokens to be presented to the TTS to re-issue Txn-Tokens for the purpose of finalizing a delayed operation.",
          "createdAt": "2024-01-30T11:17:56Z",
          "updatedAt": "2024-01-30T11:18:24Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I do not think we should allow the use of expired TraTs to authorize the issuance of new TraTs. This can be abused for token replay attacks, and negates the security we get through short-lived TraTs.",
          "createdAt": "2024-02-01T22:30:26Z",
          "updatedAt": "2024-02-01T22:30:26Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "@tulshi Good point. In order to get a new TraTs, the caller needs proper client authentication (e.g. SPIFFE, mTLS, or Basic Auth credentials). My point was to only allow specific authenticated clients the exchange of expired TraTs. It is true that if those clients get hacked themselves (and the client authentication can be done by an attacker) new TraTs can be created and abused.\r\n\r\nHowever, longer living TraTs have also the risk of being abused with replay attacks. I think the risk for replay attacks with longer living TraTs is even higher as an attacker would just need to get hold of the long-living TraTs and does not have the need to renew it.\r\n",
          "createdAt": "2024-02-02T05:46:46Z",
          "updatedAt": "2024-02-02T05:46:46Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Using an expired Txn-Token has some interesting properties. Assuming the `purp` claim is narrowly scoped, the TTS should NOT issue a new Txn-Token with a different `purp` value. \n\nI would probably recommend creating very specific `purp` values for this use case and then only allowing specific clients to request a Txn-Token where the `subject_token` value is the expired Txn-Token. This is currently allowed within the spec... the question might be whether we want to explicitly encourage or discourage such behavior.\n\nIn my mind, using an expired Txn-Token is a bit like requesting a replacement Txn-Token except the processing rules are even more strict.",
          "createdAt": "2024-03-19T22:48:04Z",
          "updatedAt": "2024-03-19T22:48:04Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "Indeed, the spec does not say anything about whether and how the TTS is validating the txn token before issuing a replacement txn-token. So presenting an already expired txn-token can be accepted based on the authenticated client, purpose and scope. After all, it can be a specifically defined policy.\r\n\r\nI recommend that we at least acknowledge this case in the spec and give guidance when to use it. As we also have the case of not presenting any token when requesting a txn-token (see #53), I think that as long as a workload is in possession of a txn-token - even if it is expired - we should recommend to present it when requesting replacement txn-tokens. It should be the decision of the TTS whether to accept the expired txn-token and not of the workload (the workload could just take the subject from the expired token and present it as the subject_token to the TTS).\r\n\r\nOne additional aspect came to our attention. There are actually two cases for expired txn-tokens:\r\n\r\n1. The exp claim says it is expired, but the signature is still valid\r\n2. The signature is not valid (anymore) as the key used to sign the token is not available anymore\r\n\r\nDepending on how frequently a TTS is rotating its key material, the second case might occur for such long running processes like deleting account data several weeks after the customer has cancelled their contract. For instance our TTS implementation is rotating the keys daily. Only the next, current and previous signing keys are provided to workloads (via JWKS uri). Even if a workload is not able to verify the signature of a txn-token it received several weeks ago, the TTS might still be able to keep the old key material for a longer period so that it can at least validate the signature of those txn-tokens.\r\n",
          "createdAt": "2024-03-22T16:46:59Z",
          "updatedAt": "2024-03-22T16:46:59Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOJt_WwM58EStr",
      "title": "audience REQUIRED for just one trust domain?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/63",
      "state": "CLOSED",
      "author": "obfuscoder",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This issue is somewhat related to the aud claim comment I made earlier via mail to the authors.\r\n\r\nThe spec states that audience parameter is REQUIRED in the Txn-Token request. It contains the trust domain. To my understanding, every trust domain has a single (logical) Txn-Service. A Txn-Service is usually configured to only issue Txn-Tokens to one and only one trust domain. Also the authenticating clients which the Txn-Service accepts in incoming requests are part of that trust domain. After all, they have been registered within that trust domain. It might be possible that the Txn-Service is used in multiple trust domains. In those scenarios I fully agree that the audience parameter is REQUIRED. My guess is, though, that the most deployed setup will incorporate a single trust domain.",
      "createdAt": "2024-01-15T08:30:44Z",
      "updatedAt": "2024-02-02T19:00:53Z",
      "closedAt": "2024-02-02T19:00:53Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So, with the move to bind the `sub` claim to the trust domain identified by the `aud` claim, I believe we should keep it to be required. I also think that there will be deployments with multiple Transaction Token Services (each using their own unique signing keys) that service a single trust domain. \r\n\r\nWhat is the benefit of making the `aud` claim optional?",
          "createdAt": "2024-01-29T14:07:40Z",
          "updatedAt": "2024-01-29T14:07:40Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "> What is the benefit of making the aud claim optional?\r\n\r\nMostly brevity reasons. Also, if it is defined as REQUIRED, it will be enforced by 3rd party libraries which a company might want to integrate in their components/services. This essentially forces the company (albeit using Txn-Tokens within their trust domain only internally) to define and set the aud claim without added benefit.\r\n\r\nHaving aud REQUIRED also implies that the value needs to be validated somehow. I think this aspect should be mentioned in the spec, if it is really required. So every Token service must have the audience parameter validated as well as every service/worker receiving a Txn-Token must validate the aud claim against a configured accepted value (or list of values).\r\n",
          "createdAt": "2024-01-30T10:06:57Z",
          "updatedAt": "2024-01-30T10:06:57Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think `aud` is required to prevent a TraT from being reused in a domain its not supposed to be used in.",
          "createdAt": "2024-02-01T19:27:23Z",
          "updatedAt": "2024-02-01T19:27:45Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as per discussion in meeting on 2/2/24: https://hackmd.io/@rpc-sec-wg/Hk0ggi5ca",
          "createdAt": "2024-02-02T19:00:53Z",
          "updatedAt": "2024-02-02T19:00:53Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "I_kwDOJt_WwM59nfI7",
      "title": "Trust domain/audience claim format URI or StringOrUri?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/66",
      "state": "CLOSED",
      "author": "obfuscoder",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In the Terminology section, the Trust Domain value is being defined and referenced in the aud claim as universal resource identifier. It should be spelled Universal Resource Identifier and a reference to RFC3986 should be added.\r\n\r\nHowever, later in the document, the aud claim value is specified as defined in RFC7519. This RFC defines the aud claim as \"StringOrURI\". The different passages should be aligned.\r\n\r\nFurthermore, the examples for the aud claim values should be aligned accordingly. In section Txn-Token Request the POST request example to the token service uses:\r\n\r\n`&audience=http%3A%2F%2Ftrust-domain.example`\r\n\r\nIf an URI is used, I suggest to use 'https' instead of 'http'.\r\n\r\nLater the JWT body example of the Txn-Token just uses a string:\r\n\r\n`\"aud\": \"trust-domain.example\",`\r\n",
      "createdAt": "2024-01-30T10:38:12Z",
      "updatedAt": "2024-02-02T19:19:10Z",
      "closedAt": "2024-02-02T19:19:10Z",
      "comments": []
    },
    {
      "number": 69,
      "id": "I_kwDOJt_WwM5-FxH9",
      "title": "Do we still need replacement transaction tokens.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/69",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need to clarify the use case for replacement transaction token and whether we still have it. We included it in the past to preserve call chain information, but it is unclear if we still should address this in the transaction token.",
      "createdAt": "2024-02-02T17:35:56Z",
      "updatedAt": "2024-03-25T23:37:06Z",
      "closedAt": "2024-03-25T23:37:05Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Conversation: https://hackmd.io/@rpc-sec-wg/Hk0ggi5ca",
          "createdAt": "2024-02-02T17:38:18Z",
          "updatedAt": "2024-02-02T17:38:18Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@PieterKas do we still want to keep this issue open? Or are we good with the latest text around replacement transaction tokens?",
          "createdAt": "2024-03-19T22:49:05Z",
          "updatedAt": "2024-03-19T22:49:05Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "@PieterKas you can re-open this if you think we should discuss this.",
          "createdAt": "2024-03-25T23:37:05Z",
          "updatedAt": "2024-03-25T23:37:05Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDOJt_WwM6C6a-S",
      "title": "Add GitHub metadata to spec draft",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/72",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-20T00:41:00Z",
      "updatedAt": "2024-03-20T01:35:48Z",
      "closedAt": "2024-03-20T01:35:48Z",
      "comments": []
    },
    {
      "number": 74,
      "id": "I_kwDOJt_WwM6C6gtr",
      "title": "Section 2.2.2 - Needs tighter security controls on replacement tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/74",
      "state": "CLOSED",
      "author": "dhs-aws",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "The following text in 2.2.2 is too open ended and should be refactored.\r\n\r\n> To get a replacement Txn-Token, a service will request a new Txn-Token from the Txn-Token Service and provide the current Txn-Token and other parameters in the request. The Txn-Token service must exercise caution in what kinds of replacement requests it supports so as to not negate the entire value of Txn-Tokens.\r\n\r\nFirst, the text should include specific guidance on replacement tokens to require scopes to remain the same or be down-scoped on replacement.  Second, the draft should include a mechanism to ensure that scopes cannot be increased, or an increase in scope can be detected by downstream services.  Finally, add text to the security considerations section regarding the risks of replacement tokens and/or a malicious txn-token-sts.\r\n\r\n\r\n",
      "createdAt": "2024-03-20T00:47:45Z",
      "updatedAt": "2024-06-21T18:09:26Z",
      "closedAt": "2024-06-21T18:09:26Z",
      "comments": [
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "As far as I understand it, replacement txn-tokens is just a profile to Token Exchange. The Token Exchange RFC defines that an issued token can only have the same or a smaller scope than the presented token. I would assume this applies to replacement tokens as well. If the replacement token mechanism is intended to deviate from Token Exchange in this regard, this should probably be mentioned specifically.",
          "createdAt": "2024-03-25T09:13:07Z",
          "updatedAt": "2024-03-25T09:13:07Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@dhs-aws please review PR #100 and see if I addressed your comments.",
          "createdAt": "2024-06-18T14:15:18Z",
          "updatedAt": "2024-06-18T14:15:18Z"
        },
        {
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Completed.  Looks good to me.",
          "createdAt": "2024-06-18T19:56:27Z",
          "updatedAt": "2024-06-18T19:56:27Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDOJt_WwM6DjHwR",
      "title": "Move 'aud' requirement in Trust Domain away from 'Terminology' section",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/76",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "Point from Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/)",
      "createdAt": "2024-03-26T00:51:15Z",
      "updatedAt": "2024-06-14T15:36:29Z",
      "closedAt": "2024-06-14T15:36:29Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "From Yaron:\r\n\r\n> 4: the terminology section is not a good place for normative language, specifically around the \"aud\" claim.",
          "createdAt": "2024-03-29T19:19:17Z",
          "updatedAt": "2024-03-29T19:19:17Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Great point. I think I can move the key aspects into section 5.2",
          "createdAt": "2024-03-29T19:19:48Z",
          "updatedAt": "2024-03-29T19:19:48Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOJt_WwM6DjH6z",
      "title": "`txn` value should be optional",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/77",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/)",
      "createdAt": "2024-03-26T00:52:07Z",
      "updatedAt": "2024-06-21T18:09:48Z",
      "closedAt": "2024-06-21T18:09:48Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Text from Yaron's email:\r\n\r\n5.2: I think txn should be OPTIONAL. While it is very useful, there may be architectural reasons why transaction ID issuance in an organization is independent of transaction tokens.",
          "createdAt": "2024-03-29T14:21:29Z",
          "updatedAt": "2024-03-29T14:21:29Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm curious to the use cases? I'd prefer a way to make the `txn` claim REQUIRED and allow an organization to provide it's own value in that context. Maybe we could go with RECOMMENDED? This is one of those cases where people who know what they are doing can potentially remove it or possibly provide a \"N_A\" value and it will be fine. However, if it's OPTIONAL most developers will not specify the value and then they will lose a lot of value from the Transaction Token.",
          "createdAt": "2024-03-29T14:24:35Z",
          "updatedAt": "2024-03-29T14:24:35Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "NONE",
          "body": "No specific use cases, it's just that we're assuming that an organization can easily integrate its (preexisting) transaction ID-issuing service with this one. Sometimes it can, sometimes it can't.\r\n\r\nI'm good with RECOMMENDED.",
          "createdAt": "2024-03-29T15:09:01Z",
          "updatedAt": "2024-03-29T15:09:01Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@yaronf please review PR #101 which addresses this issue",
          "createdAt": "2024-06-18T14:23:15Z",
          "updatedAt": "2024-06-18T14:23:15Z"
        }
      ]
    },
    {
      "number": 78,
      "id": "I_kwDOJt_WwM6DjIGO",
      "title": "`purp` claim name and optionality",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/78",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/):\r\nneed a lot more discussion of this claim, also it may be OPTIONAL too. Also, why not call it \"scope\" if that's what it is?",
      "createdAt": "2024-03-26T00:53:07Z",
      "updatedAt": "2024-06-21T18:08:41Z",
      "closedAt": "2024-06-21T18:08:41Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "From @gffletch:\r\n\r\n- In an external to internal flow, the scopes tend to be broad. The TraT can be set to a more specific to narrow the use of the TraT.\r\n- We could call it scope, but it could be confused with the OAuth scope\r\n- One could set the `purp` value to the actual API that was called to be very specific\r\n\r\nWe should add a sub-section to describe the above in the draft.",
          "createdAt": "2024-06-14T15:44:23Z",
          "updatedAt": "2024-06-14T15:44:23Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOJt_WwM6DjITB",
      "title": "Clarify difference between `rctx` and `azd`",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/79",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/):\r\nhow is \"azd\" different from \"rctx\"? There's a whole section about \"rctx\" and nothing about \"azd\".",
      "createdAt": "2024-03-26T00:54:10Z",
      "updatedAt": "2024-06-20T21:30:10Z",
      "closedAt": "2024-06-20T21:30:10Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in meeting on 06/14/2024: Add a subsection for azd, like we agreed to add a section for purp.",
          "createdAt": "2024-06-14T15:49:06Z",
          "updatedAt": "2024-06-14T15:49:06Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "I_kwDOJt_WwM6DjIjw",
      "title": "Extensibility of `azd` and `rctx`",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/80",
      "state": "OPEN",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "IETF120-discuss"
      ],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/)\r\nextensibility: please say explicitly that arbitrary claims may be added to the \"azd\" (and \"rctx\"?) objects. There is no IANA registry for either. Note that having 3 predefined attributes complicates the situation a bit - what happens if we want a 4th one? Also mention that any additional attributes are local to the trust domain.",
      "createdAt": "2024-03-26T00:55:37Z",
      "updatedAt": "2024-06-21T18:10:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "TraTs are unique within a trust domain, so do we really need an IANA registry for this? We can add a statement that specifies we can add any sub claims appropriate for the specific trust domain.",
          "createdAt": "2024-06-14T15:59:55Z",
          "updatedAt": "2024-06-14T15:59:55Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to add the `azd`, `purp`, and `rctx` claims to the JWT claims registry.  A question we need to address is how the RAR `authorization_details` and `azd` claims differ / coexist. We should do a PR that describes this. We can bring this up as a question in Vancouver. ",
          "createdAt": "2024-06-14T16:06:06Z",
          "updatedAt": "2024-06-14T16:07:33Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "NONE",
          "body": "Even within a trust domain we may want interoperability between multiple vendor solutions. And there will be token translation services that exchange/translate TraTs between trust domains. All of these would benefit from registering claims.",
          "createdAt": "2024-06-15T15:03:29Z",
          "updatedAt": "2024-06-15T15:03:29Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I look forward to discussing this in Vancouver",
          "createdAt": "2024-06-21T18:10:45Z",
          "updatedAt": "2024-06-21T18:10:45Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "I_kwDOJt_WwM6DjIv-",
      "title": "Clarify `sub` field",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/81",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/):\r\nsub\" should be better clarified, this is not your typical \u201csub\u201d. Also, I strongly prefer \"sub_id\" here (RFC 9493), as the use case I have an mind is of the subject as a human. In addition, \"as defined by the aud trust domain\" is confusing, I think you want to say that \"sub\" is relative to the scope of the trust domain.",
      "createdAt": "2024-03-26T00:56:39Z",
      "updatedAt": "2024-06-14T15:57:01Z",
      "closedAt": "2024-06-14T15:57:00Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Editors feels that the `sub` format is more appropriate for TraTs. Please reopen if you would like to discuss.",
          "createdAt": "2024-06-14T15:57:00Z",
          "updatedAt": "2024-06-14T15:57:00Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "I_kwDOJt_WwM6DjJ-P",
      "title": "Replacement token `sub` and `aud` modification language",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/82",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There was a point in Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/) about specifying in 7.4.1 that sub must be unchanged, and although this is mentioned in 7.4, perhaps we should add bullet points in 7.4.1 (Txn-Token Service Responsibilities) that specify that `sub` MUST NOT be modified and `aud` MUST NOT be modified.\r\n",
      "createdAt": "2024-03-26T01:03:13Z",
      "updatedAt": "2024-05-17T20:17:53Z",
      "closedAt": "2024-05-17T20:17:53Z",
      "comments": []
    },
    {
      "number": 83,
      "id": "I_kwDOJt_WwM6DjK0H",
      "title": "Privacy section improvements",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/83",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/):\r\n10.1: salted SHA256.\r\n10.1: also, in most cases txn tokens MUST NOT be logged because they contain PII (e.g. a subject that's an email address).",
      "createdAt": "2024-03-26T01:07:44Z",
      "updatedAt": "2024-03-29T16:00:11Z",
      "closedAt": "2024-03-29T16:00:11Z",
      "comments": []
    },
    {
      "number": 84,
      "id": "I_kwDOJt_WwM6DjLbT",
      "title": "Possible confusion in IANA registry section",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/84",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/) states that:\r\n\"11.1: I think there is some confusion here. It is possibly useful to define this value (if we want to embed txn tokens within access tokens). But the \"typ\" header is a whole different thing, it needs to be a media type. See https://datatracker.ietf.org/doc/html/rfc8725#name-use-explicit-typing\"\r\n\r\nI'm not completely sure about this, so tracking this item",
      "createdAt": "2024-03-26T01:11:08Z",
      "updatedAt": "2024-06-10T23:41:31Z",
      "closedAt": "2024-06-10T23:41:31Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://hackmd.io/@rpc-sec-wg/SyAb2pxI6 from a while back had \"https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-00.html#name-iana-considerations Registration requests are off or missing or \u2026.\" ",
          "createdAt": "2024-04-02T20:00:05Z",
          "updatedAt": "2024-04-02T20:00:05Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "I_kwDOJt_WwM6ED7X3",
      "title": "Additional guidance on privacy in logging ",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/88",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The TraTs spec should add more guidance on privacy in logging.",
      "createdAt": "2024-03-29T16:01:19Z",
      "updatedAt": "2024-06-14T16:09:17Z",
      "closedAt": "2024-06-14T16:09:17Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed in updated draft",
          "createdAt": "2024-06-14T16:09:17Z",
          "updatedAt": "2024-06-14T16:09:17Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOJt_WwM6GpEKU",
      "title": "Clarification on additional signatures",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/91",
      "state": "CLOSED",
      "author": "dteleguin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "From 2.4. Benefits of Txn-Tokens:\r\n\r\n> Through the presence of additional signatures on the Txn-Token, a workload receiving an invocation can also independently verify that specific workloads were within the path of the call before it was invoked.\r\n\r\nIt is unclear from the document how exactly the additional signatures could be added to the Txn-Token by the workloads within the call chain. Would be nice to provide some details here, or to state that this is out of the scope of the current document.",
      "createdAt": "2024-04-23T13:38:00Z",
      "updatedAt": "2024-06-14T16:10:47Z",
      "closedAt": "2024-06-14T16:10:46Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "this issue is outdated. It seems to have been addressed in the new draft.",
          "createdAt": "2024-06-14T16:10:46Z",
          "updatedAt": "2024-06-14T16:10:46Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "I_kwDOJt_WwM6IM89B",
      "title": "typo: `ieft` -> `ietf`  in `urn:ieft:params:oauth:token-type:txn-token`",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/94",
      "state": "CLOSED",
      "author": "yuriyz",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "typo: `ieft` -> `ietf`  in `urn:ieft:params:oauth:token-type:txn-token`\r\n\r\nIt seems spec has this typo also in other places. ",
      "createdAt": "2024-05-08T09:10:34Z",
      "updatedAt": "2024-06-14T16:11:10Z",
      "closedAt": "2024-06-14T16:11:10Z",
      "comments": []
    },
    {
      "number": 95,
      "id": "I_kwDOJt_WwM6JSD9m",
      "title": "Define discovery metadata for support of the Transaction Token functionality",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/95",
      "state": "OPEN",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "IETF120-discuss"
      ],
      "body": "Should we add to the spec a mechanism for a client to discover if the AS has support for the transaction token profile of the token-exchange endpoint? Or do we need to define a new .well-known location for the Transaction Token Service?",
      "createdAt": "2024-05-17T16:57:32Z",
      "updatedAt": "2024-06-14T16:19:08Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes from call on 06-14-24\r\n- (George) Discovery by an external client may not be useful, but for internal clients, it might be important. We could chain it out of the AS, because we would expect services to know where the AS is.\r\n- (Atul) Can we do a 401 response with the location of the TTS?\r\n- (Pieter) Agree that external clients don't need to discover the TTS. Discovery is useful for internal clients. Can we do resource metadata?\r\n- (George) One way is to add a new URL to the AS metadata. We should discuss this in Vancouver\r\n- (Atul, Pieter) Can we use OPRM?\r\n- (Pieter) The flow is going to be different because it assumes OAuth Access tokens\r\n",
          "createdAt": "2024-06-14T16:19:07Z",
          "updatedAt": "2024-06-14T16:19:07Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDOJt_WwM6JS0tW",
      "title": "Deployment models for the Transaction Token Service",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/96",
      "state": "OPEN",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "IETF120-discuss"
      ],
      "body": "This issue is to track different deployment models for the Transaction Token Service \r\n- embedded with the AS\r\n- embedded with an API GW\r\n- standalone service\r\n- ???",
      "createdAt": "2024-05-17T19:14:19Z",
      "updatedAt": "2024-06-26T06:46:24Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Embedded with the Authorization Server\r\n\r\nIn this model, the token exchange endpoint is exposed as part of the standard Authorization Server exposed endpoints. \r\nPros:\r\n* the `iss` claim is the same as the authorization server and likely already known by downstream workloads\r\n* the AS metadata can already be discovered from it's `iss` claim and exposes the JWKS URI\r\n* centralizes authorization policy management into a single service (policies for issuing tokens [both access and transaction] is in one place)\r\n\r\nCons:\r\n* potentially exposes the ability to obtain a transaction token outside the bounds of the trust domain (e.g. exposed externally to the internet)\r\n* difficult to distribute the transaction token issuing capability as the AS is not likely geographically distributed",
          "createdAt": "2024-05-17T20:49:25Z",
          "updatedAt": "2024-05-17T20:49:25Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes from call on 06-14-2024\r\n- In a small deployment, the TTS could be a part of the AS, but for multi-region deployments, it could be distributed\r\n- Does thinking through this bring any new requirements to the spec\r\n- (Justin) We should think through this to make sure we are not over optimizing\r\n- (Justin) A TTS is going to be a part of an AS for a lot of systems, but in more workload focused systems, it could be a part of the \"workload bundle\" or something. It has less to do with the AS in that case\r\n- (George) In that context, if my workload needs to initiate 3 different types of transactions by calling 3 different workloads, my service would still go to the TTS to get a TraT for each use case. In the Lambda case, one could provision the Lambda with a pre-injected TraT. A Kubernetes WL would get a workload token at startup, but would need a TraT per request.\r\n- (Justin) Agree that these are two different things. There isn't going to be just one way for this to show up at runtime. This is different from access tokens\r\n- (Pieter) We could have at least one TTS per cluster. Having it called out that it can be standalone, or a part of the AS will be interesting. We should call out the security considerations of standalone, so that we don't redo all the work that AS security considerations already cover\r\n- (Pieter) In WIMSE, a deliverable is local token issuance. There's a model where the TraT is embedded in the workload (the workload is self-issuing)\r\n- (George) One of the reasons to create this issue is to collect these ideas. We could collect these  different ideas, and discuss in Vancouver. People who have deployed something similar already would be useful to get feedback from.\r\n- (Atul) Can we individually contribute slides that can be discussed in Vancouver?\r\n- (Justin) Are we collecting these in a Wiki page, or a temporary section of the document that we know we are going to discard.\r\n- (George) We should just add it to this issue.\r\n- (Pieter) We should raise this both in the WIMSE and the OAuth WG in Vancouver\r\n- ",
          "createdAt": "2024-06-14T16:29:54Z",
          "updatedAt": "2024-06-14T16:29:54Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "Here is how we deployed the TTS in our environment:\r\n\r\nAlthough the TTS is a logical part of the AS system (and provided by the same team), it is a separate microservice than the authorizarion and token endpoints of the AS used by OAuth clients. The auth and token endpoints used by clients are reachable by clients outside of the company network, while the TTS endpoint is only reachable from within the company network. The key to sign the TraT is different from the key material used to encrypt/sign the ATs issued by the externally reachable token endpoint. Hence the \"iss\" and JWKS uris are different. We have multiple data centers and in each DC the TTS is available. The \"iss\" used by all TTS is the same for all DCs; a DC agnostic URI. All TTS deployments share the same key material.",
          "createdAt": "2024-06-26T06:46:23Z",
          "updatedAt": "2024-06-26T06:46:23Z"
        }
      ]
    },
    {
      "number": 97,
      "id": "I_kwDOJt_WwM6LAZHN",
      "title": "Typ header parameter being misused in TraTs draft",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/97",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "According to the RFC 7515 (JWS), the \"typ\" header parameter is supposed to indicate a media-type (https://www.iana.org/assignments/media-types/media-types.xhtml). In addition, the JWT spec section 5.1 clarifies that if used, it should be set to \"JWT\". However, the TraTs draft requires this to be set to \"txn_token\". This is clearly not right. We need to find another way to identify a JWT to be a TraT.",
      "createdAt": "2024-06-03T22:01:32Z",
      "updatedAt": "2024-06-06T23:55:55Z",
      "closedAt": "2024-06-06T23:55:55Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "see also https://www.rfc-editor.org/rfc/rfc8725.html#name-use-explicit-typing\r\nhttps://datatracker.ietf.org/doc/html/rfc9068#name-header\r\nhttps://www.rfc-editor.org/rfc/rfc9449.html#name-dpop-proof-jwt-syntax",
          "createdAt": "2024-06-04T17:08:01Z",
          "updatedAt": "2024-06-04T17:08:01Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for these references. I will go with \"txntoken+jwt\" for now, based on the recommendation of the \"Explicit Typing\" section.",
          "createdAt": "2024-06-04T21:27:20Z",
          "updatedAt": "2024-06-04T23:27:46Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "I_kwDOJt_WwM6N0NHJ",
      "title": "external invocations",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/107",
      "state": "OPEN",
      "author": "adeinega",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'm sorry if I miss anything but why does this spec put so much emphasize on \"external\" invocations?\r\n> Transaction Tokens (Txn-Tokens) enable workloads in a trusted domain to ensure that user identity and authorization context of an external programmatic request, such as an API invocation\r\n\r\nand\r\n> A valid Txn-Token indicates a valid external invocation\r\n\r\nand in many other places. This somehow limits the set of use cases where Txn Token tokens can be applied. ServiceA can make a m2m call to ServiceB in an asynchronous way, say because of some task in its scheduler, etc.\r\n\r\nI would suggest shortening \"external invocations to \"invocations\".",
      "createdAt": "2024-06-27T23:50:56Z",
      "updatedAt": "2024-07-04T16:05:44Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "What about explicitly calling out in the overview that both external and internal use cases are supported by this specifications? Support for internal use cases is called out in the section around the use of self-signed tokens and the definition associated with the `subject_token` parameter. However, I agree it's not called out as an equal use case.",
          "createdAt": "2024-07-04T16:05:43Z",
          "updatedAt": "2024-07-04T16:05:43Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 5,
      "id": "PR_kwDOJt_WwM5UMFHs",
      "title": "renaming trats to tx-tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/5",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-28T21:45:45Z",
      "updatedAt": "2023-07-07T23:02:36Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "57443b4a7be04b5e8bf46a7153313dd96a318866",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "rename-trat",
      "headRefOid": "04b04f78fc0f754ba048329fdbbf00aed6e748c1",
      "closedAt": "2023-06-28T21:47:32Z",
      "mergedAt": "2023-06-28T21:47:32Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "15f2f510571cb6efd9cc814a98520413077f2339"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOJt_WwM5UnxCR",
      "title": "Updated diagram to reflect token name change",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/9",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-04T14:00:31Z",
      "updatedAt": "2023-07-07T23:02:48Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "6387cdefbbe7937597147a3f36c65fde3c2a593c",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "ec6b44dc7edea48418d94d10a5bc86e68a321407",
      "closedAt": "2023-07-06T18:57:06Z",
      "mergedAt": "2023-07-06T18:57:06Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "a5f062cdb073d334d368a7a87af4f3cdb5a062b6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5abaky",
          "commit": {
            "abbreviatedOid": "ec6b44d"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T18:56:59Z",
          "updatedAt": "2023-07-06T18:56:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOJt_WwM5UunhF",
      "title": "Update transaction-tokens.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/13",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-05T17:42:27Z",
      "updatedAt": "2023-07-07T18:34:30Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "a5f062cdb073d334d368a7a87af4f3cdb5a062b6",
      "headRepository": "hannestschofenig/transaction-tokens",
      "headRefName": "patch-1",
      "headRefOid": "cce88e49c12bf4ba3fa898f9bcc636952292e771",
      "closedAt": "2023-07-07T18:34:30Z",
      "mergedAt": "2023-07-07T18:34:30Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "e38c3603b7c33d8dd1e5bb45df4d8d54a8b611a5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5abnNb",
          "commit": {
            "abbreviatedOid": "7332ebe"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-06T19:37:15Z",
          "updatedAt": "2023-07-06T23:01:18Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I wanted to point out that the contents of the transaction tokens may include claims that are not in the original request to the external endpoint, which is why I used the word \"computed\". If we remove this word from the sentence, then we may need to clarify that elsewhere.",
              "createdAt": "2023-07-06T19:37:15Z",
              "updatedAt": "2023-07-06T23:01:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5aj1W1",
          "commit": {
            "abbreviatedOid": "a6d234a"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-07T17:27:27Z",
          "updatedAt": "2023-07-07T17:27:27Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n* Any computed context that needs to be preserved in the call chain. This includes information that was not in the original request to the external endpoint.\r\n```",
              "createdAt": "2023-07-07T17:27:27Z",
              "updatedAt": "2023-07-07T17:27:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5akizn",
          "commit": {
            "abbreviatedOid": "cce88e4"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T18:33:27Z",
          "updatedAt": "2023-07-07T18:33:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOJt_WwM5U-EwV",
      "title": "renamed file, updated workflow",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/14",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T22:50:22Z",
      "updatedAt": "2023-07-07T23:02:33Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "e38c3603b7c33d8dd1e5bb45df4d8d54a8b611a5",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "file-rename",
      "headRefOid": "33670cc2e3c73ecb35720076a5c6a93926b40138",
      "closedAt": "2023-07-07T22:51:32Z",
      "mergedAt": "2023-07-07T22:51:32Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "10d97c629c171361d4a4b049d9e4e2c157af95a9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 15,
      "id": "PR_kwDOJt_WwM5U-GhU",
      "title": "added links to output",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/15",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T22:58:43Z",
      "updatedAt": "2023-07-07T23:02:30Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "10d97c629c171361d4a4b049d9e4e2c157af95a9",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-readme",
      "headRefOid": "19c918a2da4874942ca3674b1271630a5bcfa323",
      "closedAt": "2023-07-07T22:59:46Z",
      "mergedAt": "2023-07-07T22:59:46Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "dfadd157b66281f24474c27c35dd1199382f65b4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 16,
      "id": "PR_kwDOJt_WwM5U-IWY",
      "title": "fixed filename and removed one issue that idnits found",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/16",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T23:10:47Z",
      "updatedAt": "2023-07-07T23:55:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "dfadd157b66281f24474c27c35dd1199382f65b4",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "file-rename-2",
      "headRefOid": "4c32686891f4886c74fe6d6e42ceb7458dc9653a",
      "closedAt": "2023-07-07T23:55:05Z",
      "mergedAt": "2023-07-07T23:55:05Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "60eb7c02e060e823646c3f3b9bb216c147a8db47"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 17,
      "id": "PR_kwDOJt_WwM5VIrMe",
      "title": "file to ignore unnecessary intermediate files",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/17",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T22:27:17Z",
      "updatedAt": "2023-07-10T22:27:28Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "60eb7c02e060e823646c3f3b9bb216c147a8db47",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-gitignore",
      "headRefOid": "23c4aada0e57e9bc39af4e762d96db9f35bf463c",
      "closedAt": "2023-07-10T22:27:27Z",
      "mergedAt": "2023-07-10T22:27:27Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "feabbd1faa9339b900c18d9fb3798dcfe5a819d8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 18,
      "id": "PR_kwDOJt_WwM5VJEOm",
      "title": "added replacement transaction tokens section",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/18",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T23:47:02Z",
      "updatedAt": "2023-07-10T23:49:12Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "feabbd1faa9339b900c18d9fb3798dcfe5a819d8",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-draft",
      "headRefOid": "e77bf1e895673251056a3ab7dbfcc11ee0f48741",
      "closedAt": "2023-07-10T23:49:11Z",
      "mergedAt": "2023-07-10T23:49:11Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "de53e33902a84288bb167f682d135e4a1356eaa1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "PR_kwDOJt_WwM5VJGZn",
      "title": "updated to version 01",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/19",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T23:53:28Z",
      "updatedAt": "2023-07-10T23:53:38Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "de53e33902a84288bb167f682d135e4a1356eaa1",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-version",
      "headRefOid": "5a235dd676542dfc0cbd311a6eb09e179b83403f",
      "closedAt": "2023-07-10T23:53:37Z",
      "mergedAt": "2023-07-10T23:53:37Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "94f0a2db44cf6a6557e3fd3d9acf99ad0ac019e3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 20,
      "id": "PR_kwDOJt_WwM5VJHp4",
      "title": "updated workflow",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/20",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T23:57:10Z",
      "updatedAt": "2023-07-10T23:57:19Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "94f0a2db44cf6a6557e3fd3d9acf99ad0ac019e3",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-version",
      "headRefOid": "9942aa248e7c25f1d1022cd316a1b98a49be138e",
      "closedAt": "2023-07-10T23:57:18Z",
      "mergedAt": "2023-07-10T23:57:18Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "c90d2fe80e850d1fda15c0aa5496488aba69037f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 25,
      "id": "PR_kwDOJt_WwM5XJ2WC",
      "title": "Broke single flow diagram into 3 different diagrams",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/25",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on discussion and feedback in the IETF 117 Session, I've split the single flow diagram into three different flow diagrams.",
      "createdAt": "2023-08-04T00:50:50Z",
      "updatedAt": "2023-08-04T16:34:51Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "c90d2fe80e850d1fda15c0aa5496488aba69037f",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "split-flows",
      "headRefOid": "fcc8f0203320c615d379273c5f2e4eac8f954e6b",
      "closedAt": "2023-08-04T16:34:50Z",
      "mergedAt": "2023-08-04T16:34:50Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "8ace3d59762e5cd06bcdba0343f2e136fad3f3b6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5dKVaA",
          "commit": {
            "abbreviatedOid": "fcc8f02"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-04T14:26:54Z",
          "updatedAt": "2023-08-04T14:26:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOJt_WwM5XNw64",
      "title": "bumped version number for uploading to ietf datatracker",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/26",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-04T16:53:45Z",
      "updatedAt": "2023-08-04T16:54:33Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8ace3d59762e5cd06bcdba0343f2e136fad3f3b6",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "version-number-2",
      "headRefOid": "ecd49330842df96e32d19dd70d0771ec8bedb5bd",
      "closedAt": "2023-08-04T16:54:32Z",
      "mergedAt": "2023-08-04T16:54:32Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "04684bad5e499758a81aed611c29a69097dfdf1a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 27,
      "id": "PR_kwDOJt_WwM5XNx4g",
      "title": "Version number 2",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/27",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-04T16:58:10Z",
      "updatedAt": "2023-08-04T17:00:50Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "04684bad5e499758a81aed611c29a69097dfdf1a",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "version-number-2",
      "headRefOid": "860a10ba08937ceea9561545460d91e8889bc8d3",
      "closedAt": "2023-08-04T17:00:49Z",
      "mergedAt": "2023-08-04T17:00:49Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "33e11e4a1e870a7b2fcf411ec232e67a8705c78c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 28,
      "id": "PR_kwDOJt_WwM5XN6j_",
      "title": "renamed param in Txn-Token request",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/28",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft had a request parameter named \"azc\" and also the claim within the TraT is called \"azc\", which leads to confusion whether the request parameter content is directly embedded into the token. So I am renaming the request parameter to \"rctx\".",
      "createdAt": "2023-08-04T17:35:58Z",
      "updatedAt": "2023-09-05T18:58:54Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "33e11e4a1e870a7b2fcf411ec232e67a8705c78c",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "request-param",
      "headRefOid": "4f37d0bbefa119c6c47670464c3d0e35114ed823",
      "closedAt": "2023-08-09T18:20:07Z",
      "mergedAt": "2023-08-09T18:20:07Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "18e11ba305018e94769d30afaef74e61c25c2aaa"
      },
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Ahh... I think this parameter is for cases where the requestor wants to add some specific authorization data into the overall TxTkn. I would prefer to rename the parameter 'authz_details' which would be a JSON object and then add it as a sub-object in the `azc` of the TxTkn. ",
          "createdAt": "2023-09-05T18:58:54Z",
          "updatedAt": "2023-09-05T18:58:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 29,
      "id": "PR_kwDOJt_WwM5YHF3W",
      "title": "incorporated feedback from Dr. Kelley W Burgin",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/29",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-17T01:48:46Z",
      "updatedAt": "2023-08-25T23:53:37Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "18e11ba305018e94769d30afaef74e61c25c2aaa",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "kelley-feedback",
      "headRefOid": "8828fe08f4539f729b47a0c50ff25c65fb0e2036",
      "closedAt": "2023-08-25T23:53:37Z",
      "mergedAt": "2023-08-25T23:53:37Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "5995ff482120a44ba3337863fcc47c1368c827e8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5eSYOn",
          "commit": {
            "abbreviatedOid": "701790f"
          },
          "author": "naveencm4u1",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T06:34:33Z",
          "updatedAt": "2023-08-17T07:08:58Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "Cache-Control: no-cache, no-store",
              "createdAt": "2023-08-17T06:34:33Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 296,
              "body": "`Each string is the the value of ` -> `Each string is the value of `",
              "createdAt": "2023-08-17T06:35:13Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 321,
              "body": "`The a longer lived access token` -> `A longer-lived access token`",
              "createdAt": "2023-08-17T06:35:59Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 151,
              "body": "In the draft, Points 6-9 are displayed as one line.",
              "createdAt": "2023-08-17T06:52:22Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 191,
              "body": "In the draft, Points 6-9 are displayed as one line.",
              "createdAt": "2023-08-17T06:53:09Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 296,
              "body": "Are there any recommendations on the type of data to include or not include in `azc`? Or is it up to the individuals to encrypt if there is any sensitive data in it?\r\n",
              "createdAt": "2023-08-17T07:06:31Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOJt_WwM5a8D4F",
      "title": "final changes for draft-03 upload",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/36",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-21T23:11:17Z",
      "updatedAt": "2023-09-21T23:11:27Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "5995ff482120a44ba3337863fcc47c1368c827e8",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "draft-03",
      "headRefOid": "5b475e22a66a55b92859c024c31c57d9ad66ba50",
      "closedAt": "2023-09-21T23:11:26Z",
      "mergedAt": "2023-09-21T23:11:26Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "3fa87b2a831cd2dfb864716f36d7b591f02d7341"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 37,
      "id": "PR_kwDOJt_WwM5a8NVN",
      "title": "renamed tid to txn and added IANA registry contents",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/37",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-22T00:04:30Z",
      "updatedAt": "2023-09-22T16:40:00Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "27241e07163c90b5e8b0d08528b67d7e936e0b38",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "azc-iana",
      "headRefOid": "ae6d0ed621fe4b9d5381e1c9c05a1e7eca9ecc8d",
      "closedAt": "2023-09-22T16:39:58Z",
      "mergedAt": "2023-09-22T16:39:58Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "b31bf428360796a1ff01e83933fc5bd978b28ef8"
      },
      "comments": [
        {
          "author": "arndt-s",
          "authorAssociation": "MEMBER",
          "body": "`txn` is already registered (https://www.iana.org/assignments/jwt/jwt.xhtml).\r\nDo we need to register it again? I'm not sure what the guidance here is.",
          "createdAt": "2023-09-22T14:50:42Z",
          "updatedAt": "2023-09-22T14:50:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5hw1lY",
          "commit": {
            "abbreviatedOid": "007bbe2"
          },
          "author": "jricher",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-22T15:25:01Z",
          "updatedAt": "2023-09-22T15:25:02Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "This is already registered by SET, we should not (can not) re-register it.\r\n```suggestion\r\n## JWT Registry Contents\r\n\r\n```",
              "createdAt": "2023-09-22T15:25:01Z",
              "updatedAt": "2023-09-22T15:25:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5hxJ6J",
          "commit": {
            "abbreviatedOid": "ae6d0ed"
          },
          "author": "arndt-s",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2023-09-22T16:13:13Z",
          "updatedAt": "2023-09-22T16:13:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOJt_WwM5bBAKg",
      "title": "removed nesting",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/38",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-22T18:45:02Z",
      "updatedAt": "2023-09-25T18:33:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "b31bf428360796a1ff01e83933fc5bd978b28ef8",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "remove-nesting",
      "headRefOid": "aabcdca0a484cb8c5b9c7c856e40111794858630",
      "closedAt": "2023-09-25T18:33:05Z",
      "mergedAt": "2023-09-25T18:33:05Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "91b13d7a978a6bb89ed4a5e20a65064c84127f89"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5hzt3g",
          "commit": {
            "abbreviatedOid": "aabcdca"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-23T21:09:30Z",
          "updatedAt": "2023-09-23T21:09:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5h6YGk",
          "commit": {
            "abbreviatedOid": "aabcdca"
          },
          "author": "naveencm4u1",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-25T17:37:37Z",
          "updatedAt": "2023-09-25T17:37:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOJt_WwM5byaFA",
      "title": "Added reference for RFC 8417 (SET)",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/39",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See issue #31",
      "createdAt": "2023-10-03T12:47:43Z",
      "updatedAt": "2023-10-05T23:25:55Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "91b13d7a978a6bb89ed4a5e20a65064c84127f89",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "777c5557408b5208dc996d138c1782848c077ea6",
      "closedAt": "2023-10-05T23:25:54Z",
      "mergedAt": "2023-10-05T23:25:54Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "f484a68a9de14df5c8e8bdc3c2f11471a9d3145c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5ipza1",
          "commit": {
            "abbreviatedOid": "777c555"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-03T12:49:16Z",
          "updatedAt": "2023-10-03T12:49:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOJt_WwM5b053s",
      "title": "Added additional text to constrain Txn-Token Lifetime.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/41",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Constrain Txn-Token to be shorter than the Access Token Lifetime (upper bound on lifetime)\r\n\r\nEditorial update to security considerations",
      "createdAt": "2023-10-03T19:33:36Z",
      "updatedAt": "2023-10-05T23:25:42Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "91b13d7a978a6bb89ed4a5e20a65064c84127f89",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-2",
      "headRefOid": "5c54abefe9899991652b60dc3a30549ba39de495",
      "closedAt": "2023-10-05T23:25:41Z",
      "mergedAt": "2023-10-05T23:25:41Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "9b7d4dc12da3e82c6a13e6e7abfaca5875153c9c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5itFdq",
          "commit": {
            "abbreviatedOid": "c879e8f"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-03T19:37:40Z",
          "updatedAt": "2023-10-03T19:37:40Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This assumes that the original request had an access token, which may not always be the case (although will frequently be the case). Can we update the language to say \"If the token or other credential presented to the Txn-Token service in order to issue a txn-token has an expiration time, then the txn-token MUST not exceed the lifetime of the originally presented token or credential\"",
              "createdAt": "2023-10-03T19:37:40Z",
              "updatedAt": "2023-10-03T19:37:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5itI24",
          "commit": {
            "abbreviatedOid": "c879e8f"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-03T19:44:43Z",
          "updatedAt": "2023-10-03T19:44:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes, that sounds good. Will make the change.",
              "createdAt": "2023-10-03T19:44:43Z",
              "updatedAt": "2023-10-03T19:44:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5itKCj",
          "commit": {
            "abbreviatedOid": "5c54abe"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-03T19:48:10Z",
          "updatedAt": "2023-10-03T19:48:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "PR_kwDOJt_WwM5cIX_y",
      "title": "Removed Leaf-Tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/42",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Removed leaf token terminology",
      "createdAt": "2023-10-06T16:34:02Z",
      "updatedAt": "2023-10-06T18:54:43Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "f484a68a9de14df5c8e8bdc3c2f11471a9d3145c",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "7716405404106f490f71a5ef59b1180ad6b3d7a7",
      "closedAt": "2023-10-06T18:54:41Z",
      "mergedAt": "2023-10-06T18:54:41Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "6296e00d7010f9dcb73eab379b0cb71983b898e9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5jGba_",
          "commit": {
            "abbreviatedOid": "7716405"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-06T18:54:35Z",
          "updatedAt": "2023-10-06T18:54:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "PR_kwDOJt_WwM5c-ClW",
      "title": "added aud, orig and purp claims",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/43",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-17T04:28:30Z",
      "updatedAt": "2023-10-18T11:52:26Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "6296e00d7010f9dcb73eab379b0cb71983b898e9",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "purpose-orig",
      "headRefOid": "5633e15b55f29ee8fabe6998caf546fdae46bec2",
      "closedAt": "2023-10-18T04:06:50Z",
      "mergedAt": "2023-10-18T04:06:50Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "4998e02a0803a65b08c065e86cfbcd00062a1f54"
      },
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me. Left a comment, but nothing major.",
          "createdAt": "2023-10-18T11:51:54Z",
          "updatedAt": "2023-10-18T11:51:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5kWg7l",
          "commit": {
            "abbreviatedOid": "f3fe680"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T23:17:41Z",
          "updatedAt": "2023-10-17T23:17:42Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "What about calling this the \"req_ctxt\" (request context)? For me that is clearer than `orig`.  I might also add something about \"context\" in the text.\r\n\r\n\"... describes the origin and context of the transaction.\"",
              "createdAt": "2023-10-17T23:17:42Z",
              "updatedAt": "2023-10-17T23:17:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5kWhj4",
          "commit": {
            "abbreviatedOid": "f3fe680"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T23:19:42Z",
          "updatedAt": "2023-10-17T23:19:42Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "What about `req_wl` for requesting workload or `req_app` for requesting app. My thoughts here are that the requesting entity may not always be a gateway. In my original proposal I called this the `act` claim representing \"actor\" per the token exchange spec.",
              "createdAt": "2023-10-17T23:19:42Z",
              "updatedAt": "2023-10-17T23:19:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5kWjdf",
          "commit": {
            "abbreviatedOid": "f3fe680"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T23:22:19Z",
          "updatedAt": "2023-10-17T23:22:20Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Originally, I thought of `azc` to be more transaction context focused. Since we've moved a lot of those details to the `orig` claim. It may make sense to move this to `azd` for \"authorization details\". For me this maps better to the data we have in the `azc` claim in the example. Thoughts?",
              "createdAt": "2023-10-17T23:22:19Z",
              "updatedAt": "2023-10-17T23:22:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5kWjmE",
          "commit": {
            "abbreviatedOid": "f3fe680"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "A few comments but otherwise looks good.",
          "createdAt": "2023-10-17T23:23:10Z",
          "updatedAt": "2023-10-17T23:23:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5kWuZW",
          "commit": {
            "abbreviatedOid": "f2dfd9c"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T00:19:58Z",
          "updatedAt": "2023-10-18T00:19:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5kbLgP",
          "commit": {
            "abbreviatedOid": "5633e15"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T11:49:58Z",
          "updatedAt": "2023-10-18T11:49:58Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Do you want to call out that this may be a SPIFFE ID as example?",
              "createdAt": "2023-10-18T11:49:58Z",
              "updatedAt": "2023-10-18T11:49:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5kbMfp",
          "commit": {
            "abbreviatedOid": "5633e15"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Left a comment, but looks good to me.",
          "createdAt": "2023-10-18T11:52:26Z",
          "updatedAt": "2023-10-18T11:52:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOJt_WwM5dZq70",
      "title": "Added Arndt as contributor, updated draft number to submit to IETF",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/45",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-20T16:25:17Z",
      "updatedAt": "2023-10-20T17:31:24Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "4998e02a0803a65b08c065e86cfbcd00062a1f54",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-arndt",
      "headRefOid": "2be946c161308d976bbf830cc413391a3f64804e",
      "closedAt": "2023-10-20T17:31:23Z",
      "mergedAt": "2023-10-20T17:31:23Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d37ced510df12616ab6eeb29163ad5281c1ee440"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5kxHVk",
          "commit": {
            "abbreviatedOid": "2be946c"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2023-10-20T17:22:38Z",
          "updatedAt": "2023-10-20T17:22:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOJt_WwM5da7ZZ",
      "title": "Typo fix",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/46",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-20T21:05:37Z",
      "updatedAt": "2023-10-20T21:10:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d37ced510df12616ab6eeb29163ad5281c1ee440",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "typo-fix",
      "headRefOid": "d37a3d16d13cea0ca6a5c02b1e81089c867d8948",
      "closedAt": "2023-10-20T21:10:05Z",
      "mergedAt": "2023-10-20T21:10:05Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "a04c52de169e85df0693f5b39cf14f0552b778b3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 47,
      "id": "PR_kwDOJt_WwM5da-el",
      "title": "fixed IANA registry formatting",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/47",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-20T21:20:33Z",
      "updatedAt": "2023-10-20T21:22:25Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "a04c52de169e85df0693f5b39cf14f0552b778b3",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "iana-fix",
      "headRefOid": "66f089146cbc2493e7122aede219c28acdda951d",
      "closedAt": "2023-10-20T21:22:24Z",
      "mergedAt": "2023-10-20T21:22:24Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "6fa76c61aa15d93bade1c840ab6d0769ca617303"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 51,
      "id": "PR_kwDOJt_WwM5fM189",
      "title": "Update draft-tulshibagwale-oauth-transaction-tokens-05.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/51",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I moved the Security Considerations section before the IANA registry text and added a Privacy Considerations section as raised in the IETF 118 meeting.",
      "createdAt": "2023-11-11T04:49:23Z",
      "updatedAt": "2023-11-13T18:27:02Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "6fa76c61aa15d93bade1c840ab6d0769ca617303",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "main",
      "headRefOid": "f4fc5e8af64b1bf8d817255a3d55e7afec197259",
      "closedAt": "2023-11-13T18:27:01Z",
      "mergedAt": "2023-11-13T18:27:01Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "e5c685831cf7790379b8f4a6e01eec1ade09d220"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5m_oAm",
          "commit": {
            "abbreviatedOid": "f4fc5e8"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-13T18:26:51Z",
          "updatedAt": "2023-11-13T18:26:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOJt_WwM5gnUzT",
      "title": "renamed for adopted draft submission",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/54",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-29T00:18:27Z",
      "updatedAt": "2023-11-29T18:14:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "e5c685831cf7790379b8f4a6e01eec1ade09d220",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "adopted-draft",
      "headRefOid": "390638b34338d70b6ec1c8beadd07091c886e75e",
      "closedAt": "2023-11-29T18:14:09Z",
      "mergedAt": "2023-11-29T18:14:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "84d9ab78d55c5a2fa49f94188803283510fc3d50"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5okIC2",
          "commit": {
            "abbreviatedOid": "2eb2536"
          },
          "author": "naveencm4u1",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T02:21:39Z",
          "updatedAt": "2023-11-29T02:21:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOJt_WwM5hhM0b",
      "title": "Migrate tooling",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/55",
      "state": "MERGED",
      "author": "arndt-s",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Uses https://github.com/martinthomson/i-d-template template to set up tooling",
      "createdAt": "2023-12-08T12:21:28Z",
      "updatedAt": "2023-12-08T14:24:47Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "84d9ab78d55c5a2fa49f94188803283510fc3d50",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "arndt-s/migrate_tooling",
      "headRefOid": "7100f28efbafe767cb6abc5e37bb75d1cf8b8ff1",
      "closedAt": "2023-12-08T14:24:46Z",
      "mergedAt": "2023-12-08T14:24:46Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "732521a26b4fc3256d2d53b1aef60688946c86f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5ppe9_",
          "commit": {
            "abbreviatedOid": "7100f28"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-08T14:24:15Z",
          "updatedAt": "2023-12-08T14:24:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOJt_WwM5h1it9",
      "title": "Token exchange profile update",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/57",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updated the text to more clearly profile the token exchange specification for use with Transaction Tokens.",
      "createdAt": "2023-12-12T21:23:08Z",
      "updatedAt": "2024-01-29T19:44:50Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "732521a26b4fc3256d2d53b1aef60688946c86f8",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "token-exchange",
      "headRefOid": "5a8d9a3ec2d59c5ad95253f063179ebc262a953c",
      "closedAt": "2024-01-29T19:43:15Z",
      "mergedAt": "2024-01-29T19:43:14Z",
      "mergedBy": "gffletch",
      "mergeCommit": {
        "oid": "379227fd8af3a3cf17e7a5ae53073cc67a0331a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5qHDWD",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-13T18:17:49Z",
          "updatedAt": "2023-12-14T00:53:10Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "\"may be requested -> \"MAY be requested\"",
              "createdAt": "2023-12-13T18:17:49Z",
              "updatedAt": "2023-12-14T00:53:10Z"
            },
            {
              "originalPosition": 41,
              "body": "The new wording makes the use of Token Exchange look optional. Is that intended? If so, we should perhaps clarify that (I have no opinion on the optionality, but I would like this draft to describe the Token Exchange profile as it is doing now)",
              "createdAt": "2023-12-13T18:19:26Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            },
            {
              "originalPosition": 50,
              "body": "`scope` is optional in a token exchange request. I'm supportive of making it required, but I'm trying to remember whether we have discussed this.",
              "createdAt": "2023-12-14T00:45:38Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            },
            {
              "originalPosition": 63,
              "body": "I'm not sure about this. I feel that the `azd` claim in the TraT should be minted by the TraT server, so the requesting service should only provide the context based on which the TraT can be minted. I feel the requesting service should not be able to dictate what goes into the TraT as the azd.",
              "createdAt": "2023-12-14T00:48:30Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            },
            {
              "originalPosition": 88,
              "body": "Not sure what you mean by \"the specified Txn-Token\" here. Perhaps we can say \"...determine if that workload is authorized to request Txn-Tokens with the requested values\"?",
              "createdAt": "2023-12-14T00:51:21Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            },
            {
              "originalPosition": 100,
              "body": "I'd like to discuss this part. I feel the requesting service should not oblige the TraT service to have specific content in the TraT.",
              "createdAt": "2023-12-14T00:52:50Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qZCoJ",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T21:24:28Z",
          "updatedAt": "2023-12-15T21:51:00Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "check the way `token_type` is defined, which is kinda awakrd in this context. See https://datatracker.ietf.org/doc/html/rfc8693#section-2.2.1-2.4 and https://www.rfc-editor.org/rfc/rfc6749#section-7.1 \r\n\r\njust using `N_A` here might be appropriate ",
              "createdAt": "2023-12-15T21:24:28Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 111,
              "body": "missing `issued_token_type` in this list ",
              "createdAt": "2023-12-15T21:24:57Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 110,
              "body": "I would not say \"in base64url encoded from\" here as might suggest the Txn-Token is supposed to be re-encoded or otherwise confuse folks. The Txn-Token is a JWT. Nothing more needs to be said here. ",
              "createdAt": "2023-12-15T21:35:01Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 108,
              "body": "also the example below is missing token_type ",
              "createdAt": "2023-12-15T21:35:42Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 52,
              "body": "GW probably needs to be spelled out ",
              "createdAt": "2023-12-15T21:41:10Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 66,
              "body": "\"OAuth 2.0 Bearer tokens using a client credentials token\" -> token exchange is defined at the token endpoint, which can directly accept oauth client authentication. Also \"client credentials token\" isn't a defined thing (I think I know what you mean but I'm guessing).  ",
              "createdAt": "2023-12-15T21:50:01Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafRZ",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:20:47Z",
          "updatedAt": "2023-12-17T02:20:47Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I wasn't intending that MAY to normative. Does it make sense to be normative?",
              "createdAt": "2023-12-17T02:20:47Z",
              "updatedAt": "2023-12-18T15:34:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafTm",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:23:25Z",
          "updatedAt": "2023-12-17T02:23:26Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I wasn't intending the text to imply that token exchange is optional, but rather that the Transaction Token spec is profiling the token exchange spec and that profile MUST be followed for the purpose of requesting Txn-Tokens. For me a profile doesn't mean the initial spec is optional but rather that the use of the transaction token spec is modified in some way.",
              "createdAt": "2023-12-17T02:23:26Z",
              "updatedAt": "2023-12-17T02:23:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafU1",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:25:01Z",
          "updatedAt": "2023-12-17T02:25:01Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I added it as required, because we have the 'purpose' claim of the Txn-Token and the requesting workload needs to specify what that purpose is. I discussed with Brian via email and we thought using the existing 'scope' parameter was a better option than defining a new parameter. I'm open to other perspectives.",
              "createdAt": "2023-12-17T02:25:01Z",
              "updatedAt": "2023-12-17T02:25:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafWS",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:26:54Z",
          "updatedAt": "2023-12-17T02:26:54Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "So if all that `azd` data is in the access_token that's fine but what about the case where the requesting workload doesn't have an access token and is requesting a TraT to be minted. In that case, how does the workload ask for the additional transaction data to be added to the Trat in the `azd` claim?",
              "createdAt": "2023-12-17T02:26:54Z",
              "updatedAt": "2023-12-17T02:26:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafXq",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:28:21Z",
          "updatedAt": "2023-12-17T02:28:21Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "That's clearer. I'll update with that wording.",
              "createdAt": "2023-12-17T02:28:21Z",
              "updatedAt": "2023-12-17T02:28:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafZU",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:30:53Z",
          "updatedAt": "2023-12-17T02:30:53Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "I think I was wondering about that when I wrote it so happy to have a discussion about this. I'm thinking mostly about the case where an internal workload (e.g. like a scheduled job) needs a TraT and has additional details about the transaction that it wants to make immutable. We can say that it is up to the Transaction Token Service (TTS) to determine what data is included in the TraT. How the TTS makes that determination is out of scope for the specification.",
              "createdAt": "2023-12-17T02:30:53Z",
              "updatedAt": "2023-12-17T02:30:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafb1",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:33:59Z",
          "updatedAt": "2023-12-17T02:34:00Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "Yes, I agree that N_A is probably better. I'll update accordingly.",
              "createdAt": "2023-12-17T02:33:59Z",
              "updatedAt": "2023-12-17T02:34:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafca",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:34:36Z",
          "updatedAt": "2023-12-17T02:34:36Z",
          "comments": [
            {
              "originalPosition": 111,
              "body": "Thanks!",
              "createdAt": "2023-12-17T02:34:36Z",
              "updatedAt": "2023-12-17T02:34:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafdO",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:35:31Z",
          "updatedAt": "2023-12-17T02:35:31Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "Ok. I wasn't sure how JWT are specified as values of a JSON claim. If multiple encodings are supported that's fine.",
              "createdAt": "2023-12-17T02:35:31Z",
              "updatedAt": "2023-12-17T02:35:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafep",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:37:19Z",
          "updatedAt": "2023-12-17T02:37:19Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Ok, let me re-work this paragraph and just point to the client authentication mechanisms supported by the /token endpoint as defined in existing RFCs.",
              "createdAt": "2023-12-17T02:37:19Z",
              "updatedAt": "2023-12-17T02:37:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qbx4X",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "naveencm4u1",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T02:00:28Z",
          "updatedAt": "2023-12-18T02:00:28Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Since the transaction token is passed to multiple workloads in a transaction, is it ok to expose `azd` to all the workloads? Is there any guidance on which type of data can be added to `azd`.\r\nWe are working on adding common fields to `azd` and also encrypt them. Access to the decryption secret is limited to specific workloads that need the data.\r\n\r\n",
              "createdAt": "2023-12-18T02:00:28Z",
              "updatedAt": "2023-12-18T02:00:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhDhi",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T14:48:10Z",
          "updatedAt": "2023-12-18T14:48:11Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "That is a really interesting question and I wonder if selective disclosure JWTs could be a way to address that. I suppose if different workloads need access to different aspects of the `azd` data that could be more complicated.\r\n\r\nOne question, we may want to consider for this specification is whether that level of detail should be left up the specific deployment and become out of scope for this specification. Regardless, it's an interesting question. Would you mind filing an issue on it? I think it needs it's own discussion.",
              "createdAt": "2023-12-18T14:48:11Z",
              "updatedAt": "2023-12-18T14:48:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhhiG",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T15:32:40Z",
          "updatedAt": "2023-12-18T15:32:41Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I updated the previous paragraph (#Txn-Token Service) to be much stronger. Do we feel we need both? I can update here as well.",
              "createdAt": "2023-12-18T15:32:41Z",
              "updatedAt": "2023-12-18T15:32:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhhua",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T15:33:04Z",
          "updatedAt": "2023-12-18T15:33:05Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "I filed an issue regarding this topic",
              "createdAt": "2023-12-18T15:33:05Z",
              "updatedAt": "2023-12-18T15:33:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhh7R",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T15:33:30Z",
          "updatedAt": "2023-12-18T15:33:30Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "I filed an issue on this topic",
              "createdAt": "2023-12-18T15:33:30Z",
              "updatedAt": "2023-12-18T15:33:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhiXi",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T15:34:25Z",
          "updatedAt": "2023-12-18T15:34:25Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I filed an issue on this topic",
              "createdAt": "2023-12-18T15:34:25Z",
              "updatedAt": "2023-12-18T15:34:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qib6L",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T17:37:30Z",
          "updatedAt": "2023-12-18T17:37:31Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "not sure - it could make sense either way.",
              "createdAt": "2023-12-18T17:37:30Z",
              "updatedAt": "2023-12-18T17:37:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qkeHY",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T01:20:55Z",
          "updatedAt": "2023-12-19T01:20:55Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "Wait, what? This isn't a claim and there's only one encoding of a JWT.  This confused me :/ But \"Txn-Token JWT\" is in the latest commit works for me. Maybe someday we can discuss and hash out some of the confusion here. But latest text is good. ",
              "createdAt": "2023-12-19T01:20:55Z",
              "updatedAt": "2023-12-19T01:20:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5q5_pH",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "CASABECI",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-21T20:01:39Z",
          "updatedAt": "2023-12-21T20:01:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5q6AbG",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "CASABECI",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Wkn",
          "createdAt": "2023-12-21T20:02:14Z",
          "updatedAt": "2023-12-21T20:02:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5rdUcw",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-03T18:10:02Z",
          "updatedAt": "2024-01-03T18:10:02Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Issue #58 ",
              "createdAt": "2024-01-03T18:10:02Z",
              "updatedAt": "2024-01-03T18:10:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5rdVEF",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-03T18:12:05Z",
          "updatedAt": "2024-01-03T18:12:05Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Issue #61 ",
              "createdAt": "2024-01-03T18:12:05Z",
              "updatedAt": "2024-01-03T18:12:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5sjT2G",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-15T08:39:05Z",
          "updatedAt": "2024-01-15T08:39:05Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "\"For example, many deployments may chose ... those others formats are perfectly valid as well.\"\r\n\r\nI believe that should be two sentences or separated?",
              "createdAt": "2024-01-15T08:39:05Z",
              "updatedAt": "2024-01-15T08:39:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5sjUuR",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-15T08:41:24Z",
          "updatedAt": "2024-01-15T08:41:33Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "The PR  suggests that the scope is simply copied to the purp claim. Is this really the case? Shouldn't rather the scope of the presented Access Token be narrowed down to what is given in the scope request param?",
              "createdAt": "2024-01-15T08:41:24Z",
              "updatedAt": "2024-01-15T08:41:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5sjoqB",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-15T09:27:30Z",
          "updatedAt": "2024-01-15T09:27:30Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Considering a scenario where multiple trust domains are supported by the Txn-Service, I assume that the aud claim will be determined by the audience request parameter?",
              "createdAt": "2024-01-15T09:27:30Z",
              "updatedAt": "2024-01-15T09:27:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5twcm-",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-24T13:46:28Z",
          "updatedAt": "2024-01-24T13:46:28Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "After additional discussion, we've decided to move away from using the `sub_id` construct and just use `sub` and bind the uniqueness of the `sub` value to the trust domain as defined by the `aud` claim. An updated commit will make this change.",
              "createdAt": "2024-01-24T13:46:28Z",
              "updatedAt": "2024-01-24T13:46:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5twdiX",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-24T13:48:14Z",
          "updatedAt": "2024-01-24T13:48:14Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "Good catch. The transaction token service (TTS) is authoritative for setting the `purp` claim. The text will be updated to allow the TTS to use the `scope` value to make the determination. Note that not all transaction token requests will contain an access token.",
              "createdAt": "2024-01-24T13:48:14Z",
              "updatedAt": "2024-01-24T13:48:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5twgWO",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-24T13:53:41Z",
          "updatedAt": "2024-01-24T13:53:41Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "That could be a possible deployment solution provided all transaction token requests have a way to define the trust domain to be used for that request. I've updated the text to allow for this case.",
              "createdAt": "2024-01-24T13:53:41Z",
              "updatedAt": "2024-01-24T13:53:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5ty8Fq",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "KramNosaj01",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-24T18:08:22Z",
          "updatedAt": "2024-01-24T18:08:22Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "where to put the tokens?im sorry im just beginner",
              "createdAt": "2024-01-24T18:08:22Z",
              "updatedAt": "2024-01-24T18:08:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t8uhQ",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T20:36:26Z",
          "updatedAt": "2024-01-25T20:51:03Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I would like to make this language a bit more normative. How about something like \"The iss claim ... is optional. In situations where there are multiple Txn-Token issuers for the same trust domain, the iss claim MUST be included and MUST describe the issuer of the Txn-Token.\"",
              "createdAt": "2024-01-25T20:36:26Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 67,
              "body": "For compactness, should we change this name to \"rctx\" (since we are not using that in the Txn-Token request anymore) or something shorter?",
              "createdAt": "2024-01-25T20:38:20Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 83,
              "body": "Figure needs to be updated.",
              "createdAt": "2024-01-25T20:39:10Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 101,
              "body": "Typo: it's -> its\r\nShould we say \"MUST provide the Txn-Token Service with proof\"? (capitalize MUST)\r\nAlso, should we break this sentence into two parts: the required things (client-auth and purpose) and optional things (request context)? We should also drop the \"also\" from the last sentence (This profile also defines a new token type). We could even make that separate sub-section to clarify that we are defining a new token type.",
              "createdAt": "2024-01-25T20:44:25Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 107,
              "body": "Is the \"/\" required in the \"/token\"?",
              "createdAt": "2024-01-25T20:48:22Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 122,
              "body": "it's -> its",
              "createdAt": "2024-01-25T20:48:52Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 146,
              "body": "use \"trust domain\" instead of \"trust boundary\"?",
              "createdAt": "2024-01-25T20:49:59Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t9D9w",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T21:36:21Z",
          "updatedAt": "2024-01-25T21:36:21Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "I'm ok with that.",
              "createdAt": "2024-01-25T21:36:21Z",
              "updatedAt": "2024-01-25T21:36:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t9Eby",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T21:37:47Z",
          "updatedAt": "2024-01-25T21:37:47Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "No, it's just my notation for identifying the endpoint. We could use \"OAuth {{RFC6749}} token endpoint\" to unique identify the endpoint.",
              "createdAt": "2024-01-25T21:37:47Z",
              "updatedAt": "2024-01-25T21:37:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t9Vt2",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T22:36:00Z",
          "updatedAt": "2024-01-25T22:36:01Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "@tulshi are you ok if I just change the MAY to MUST?  It is still possible for multiple Txn-Token issues to use a predetermined signing key.\r\n\r\nI can add a sentence along the lines of \"The signing key MUST be discoverable via the `iss` claim\".\r\n\r\nIf we say that, do we need to define that discovery mechanism? or can we just refer to OAuth AS Metadata?",
              "createdAt": "2024-01-25T22:36:01Z",
              "updatedAt": "2024-01-25T22:36:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uMVtR",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-29T13:52:15Z",
          "updatedAt": "2024-01-29T13:52:15Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "I took out the `iss` claim, and replaced `sub_id` with `sub`",
              "createdAt": "2024-01-29T13:52:15Z",
              "updatedAt": "2024-01-29T13:52:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uMXT7",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-29T13:55:25Z",
          "updatedAt": "2024-01-29T13:55:26Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "I called out more clearly the optional parts from the required parts. Let me know what you think.",
              "createdAt": "2024-01-29T13:55:25Z",
              "updatedAt": "2024-01-29T13:55:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uPuGi",
          "commit": {
            "abbreviatedOid": "5a8d9a3"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-29T19:38:00Z",
          "updatedAt": "2024-01-29T19:38:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 64,
      "id": "PR_kwDOJt_WwM5kyLy6",
      "title": "Add header",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/64",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch",
        "bc-pi",
        "PieterKas"
      ],
      "labels": [],
      "body": "Addresses Issue #49 ",
      "createdAt": "2024-01-23T01:46:29Z",
      "updatedAt": "2024-01-29T19:00:18Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "732521a26b4fc3256d2d53b1aef60688946c86f8",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-header",
      "headRefOid": "73b34be8246cabe1d2dffd7dcc33ac9ece57e127",
      "closedAt": "2024-01-29T19:00:17Z",
      "mergedAt": "2024-01-29T19:00:17Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "96733800e3e40a781fdc40473af9faea91e34458"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5tq9e3",
          "commit": {
            "abbreviatedOid": "de88238"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-23T21:34:15Z",
          "updatedAt": "2024-01-23T21:34:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "We should probably capitalize `Http` like in the other text",
              "createdAt": "2024-01-23T21:34:15Z",
              "updatedAt": "2024-01-23T21:34:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5tq-Xc",
          "commit": {
            "abbreviatedOid": "61e0025"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-23T21:36:13Z",
          "updatedAt": "2024-01-23T21:36:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Do we need to (or should we) say anything about the encoding of the JWT?",
              "createdAt": "2024-01-23T21:36:13Z",
              "updatedAt": "2024-01-23T21:36:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t1RV0",
          "commit": {
            "abbreviatedOid": "61e0025"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T01:21:57Z",
          "updatedAt": "2024-01-25T01:21:58Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I've updated the language to specify the encoding. However, I feel like this might be redundant.",
              "createdAt": "2024-01-25T01:21:57Z",
              "updatedAt": "2024-01-25T01:21:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uDVAO",
          "commit": {
            "abbreviatedOid": "61e0025"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-26T18:58:38Z",
          "updatedAt": "2024-01-26T18:58:38Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "See [notes](https://hackmd.io/@rpc-sec-wg/BJKeLDZcp) of call on 1/26. We have decided to drop the line about the format.",
              "createdAt": "2024-01-26T18:58:38Z",
              "updatedAt": "2024-01-26T18:58:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uMcPc",
          "commit": {
            "abbreviatedOid": "73b34be"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-29T14:04:48Z",
          "updatedAt": "2024-01-29T14:04:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOJt_WwM5lXcDe",
      "title": "updated HTTP reference",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/65",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-29T19:17:03Z",
      "updatedAt": "2024-01-29T21:56:00Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "379227fd8af3a3cf17e7a5ae53073cc67a0331a1",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-http-rfc-ref",
      "headRefOid": "d1c4ed26d6b913f5f163e362b83ccb273dfaf7be",
      "closedAt": "2024-01-29T21:55:59Z",
      "mergedAt": "2024-01-29T21:55:59Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d3110bceb6efcd50383b3528888cc362117fe44d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5uPu0m",
          "commit": {
            "abbreviatedOid": "2229c0e"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-29T19:39:46Z",
          "updatedAt": "2024-01-29T19:39:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5uP1Aa",
          "commit": {
            "abbreviatedOid": "2229c0e"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2024-01-29T19:55:43Z",
          "updatedAt": "2024-01-29T19:55:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5uQmHm",
          "commit": {
            "abbreviatedOid": "d1c4ed2"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-29T21:52:50Z",
          "updatedAt": "2024-01-29T21:52:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOJt_WwM5lbwpr",
      "title": "Clarify and align audience claim value format",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/67",
      "state": "CLOSED",
      "author": "obfuscoder",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Resolve #66",
      "createdAt": "2024-01-30T10:48:05Z",
      "updatedAt": "2024-02-22T13:10:38Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3110bceb6efcd50383b3528888cc362117fe44d",
      "headRepository": "obfuscoder/oauth-transaction-tokens",
      "headRefName": "audformat",
      "headRefOid": "1150bfd047e72e55a1be4b7c33e0a260d0685dfc",
      "closedAt": "2024-02-22T13:10:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "As this was addressed in another PR in parallel which was merged already, I am closing this PR.",
          "createdAt": "2024-02-22T13:10:37Z",
          "updatedAt": "2024-02-22T13:10:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5utgpr",
          "commit": {
            "abbreviatedOid": "1150bfd"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-01T19:31:33Z",
          "updatedAt": "2024-02-01T19:32:18Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "specify \"Section 2 of {{RFC7519}}\"",
              "createdAt": "2024-02-01T19:31:34Z",
              "updatedAt": "2024-02-01T19:32:18Z"
            },
            {
              "originalPosition": 27,
              "body": "Do we need to have \"https\" or any protocol in a StringOrUri? It should be OK to not have a protocol prefix.",
              "createdAt": "2024-02-01T19:32:06Z",
              "updatedAt": "2024-02-01T19:32:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uxLDJ",
          "commit": {
            "abbreviatedOid": "1150bfd"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-02T06:02:16Z",
          "updatedAt": "2024-02-02T06:02:17Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "True, if StringOrUri type should be defined, then a leading https:// is not necessary. In this case I would align the other instances where this audience is used.\r\n\r\nAs you want to discuss it in the call today, I wait with the update of the PR until after the discussion.\r\n\r\n(P.S: As much as I would like to join the regular call, the time slot is quite difficult for me due to other conflicting obligations.)",
              "createdAt": "2024-02-02T06:02:16Z",
              "updatedAt": "2024-02-02T06:02:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5u1i3X",
          "commit": {
            "abbreviatedOid": "1150bfd"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-02T15:33:11Z",
          "updatedAt": "2024-02-02T15:33:12Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I'm not sure we want to require that \"Each Trust Domain has `exactly one` Txn-Service\". I'd prefer we remove this line entirely and be silent on the topic as there can be multiple deployment options.",
              "createdAt": "2024-02-02T15:33:11Z",
              "updatedAt": "2024-02-02T15:33:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOJt_WwM5lwziU",
      "title": "removed sender constrained text as discussed on 12/08",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/68",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See meeting notes here where we agreed to remove this: https://hackmd.io/v6Gx0rvsTp2VJwL_quWuGA",
      "createdAt": "2024-02-01T22:41:13Z",
      "updatedAt": "2024-02-02T16:49:42Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3110bceb6efcd50383b3528888cc362117fe44d",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "remove-sender-constraints",
      "headRefOid": "79ea8b2d4a526df17c7ed7c16647ae2258fdea84",
      "closedAt": "2024-02-02T16:49:41Z",
      "mergedAt": "2024-02-02T16:49:41Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "b47a5d626cd2ca5f63e7d3c24fa1215f9de5fb40"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5u1hy8",
          "commit": {
            "abbreviatedOid": "79ea8b2"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-02T15:30:56Z",
          "updatedAt": "2024-02-02T15:30:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOJt_WwM5l3g4L",
      "title": "clarified that aud claim should have the same format as in the JWT spec",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/70",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-02T19:11:43Z",
      "updatedAt": "2024-02-02T19:19:09Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "b47a5d626cd2ca5f63e7d3c24fa1215f9de5fb40",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "aud-claim-format",
      "headRefOid": "d43d739055c1c7d580be8e3ac2dfd9b2a571be24",
      "closedAt": "2024-02-02T19:19:09Z",
      "mergedAt": "2024-02-02T19:19:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "15d18fbacd2682c53672ad487c4e0d4b497d6860"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5u323d",
          "commit": {
            "abbreviatedOid": "d43d739"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-02T19:15:33Z",
          "updatedAt": "2024-02-02T19:15:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOJt_WwM5mQ_Jm",
      "title": "Addressing issue #44 - updating rules for the `sub` claim when requesting replacement transaction tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/71",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I updated the text to require the `sub` claim remain unchanged when requesting a replacement transaction token. I also added a mechanism to allow for tracking the workloads that have requested replacement transaction tokens. This was necessary as the current text required the `rctx` to remain unchanged in the replacement transaction token and the `rctx` object contains the requesting workload identifier. I used a mechanisms similar to x-forwarded-for. This needs lots of review.",
      "createdAt": "2024-02-07T13:53:06Z",
      "updatedAt": "2024-02-24T21:20:57Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "15d18fbacd2682c53672ad487c4e0d4b497d6860",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "txn-token-issues",
      "headRefOid": "d07dde61e76e0380ff3d00b2d03ed0eb95559e86",
      "closedAt": "2024-02-24T21:20:57Z",
      "mergedAt": "2024-02-24T21:20:57Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "5f8197ca32747537775b0353b1aeb30f24aa68f7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5v15xE",
          "commit": {
            "abbreviatedOid": "b93798d"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T21:41:43Z",
          "updatedAt": "2024-02-12T21:49:31Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Do we need to provide a reference for \"StringOrUri\", or has it occurred earlier in the doc?",
              "createdAt": "2024-02-12T21:41:44Z",
              "updatedAt": "2024-02-12T21:49:31Z"
            },
            {
              "originalPosition": 26,
              "body": "\"Be default\" -> \"By default\"\r\n2nd sentence also should clarify that the value becomes an array if more than one workload needs to be included, and the successive elements are later services that obtained replacements Txn-tokens. (Your text implies both these things, but it might be good to clarify it.)",
              "createdAt": "2024-02-12T21:48:40Z",
              "updatedAt": "2024-02-12T21:49:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5wvcHo",
          "commit": {
            "abbreviatedOid": "b93798d"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T20:03:40Z",
          "updatedAt": "2024-02-20T20:03:40Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "When we approve PR #67 StringOrURI will be defined at the first use when describing the Trust Domain so I don't think we need to define it here.",
              "createdAt": "2024-02-20T20:03:40Z",
              "updatedAt": "2024-02-20T20:03:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5wv4t_",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-20T21:16:08Z",
          "updatedAt": "2024-02-20T21:16:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5w_usX",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-22T12:38:42Z",
          "updatedAt": "2024-02-22T13:08:47Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "the phrase \"as well as\" is now used twice in this sentence. Maybe you can reorder the sentence or make it two?",
              "createdAt": "2024-02-22T12:38:43Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 26,
              "body": "Typo in:  ... a \"pathing\" mechanisms ...\r\n\r\nShould be mechanism",
              "createdAt": "2024-02-22T12:41:55Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 22,
              "body": "This definition contradicts the definition in the added section below. You could also mention here that it can be an array if multiple computational entities where involved in requesting the Txn-Token.\r\n",
              "createdAt": "2024-02-22T12:45:52Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 33,
              "body": "Is it practical from an implementer's perspective to deal with multiple types in one attribute?\r\n\r\nPossible alternatives:\r\n\r\n1) Define req_wl always as an array of StringOrURIs, even if there is only one element.\r\n2) Have a separate attribute (maybe \"orig_wls\") which is an array with StringOrURIs of the workloads originally requesting the Txn-Token in order of replacement. This attribute can be omitted if there was no replacement Txn-Token issued.\r\n",
              "createdAt": "2024-02-22T12:51:04Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 45,
              "body": "I am assuming this change here addresses a discussion where there is no subject token available which the Txn-Token can extract the subject from and instead the subject identifier is being provided in plain? Should we maybe define a specific subject_token_type for this case? \"N_A\" might not fit here.\r\n\r\nAlso ... (I'm not a native speaker in English, but ...)\r\n\r\n\"or simple string value\" -> \"or a simple string value\"\r\n\r\nand shouldn't there be a comma before the \"or\"?",
              "createdAt": "2024-02-22T12:52:27Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 55,
              "body": "Maybe also update the part \"then it MUST be present unchanged in\"? Should be \"then it MUST be present and unchanged in\"",
              "createdAt": "2024-02-22T13:07:13Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJfiU",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-23T14:58:29Z",
          "updatedAt": "2024-02-23T14:58:30Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "So, there are many claims in JWT that use this method of being a string if only one value and an array if more than one. I was just following that precedent. This is true of the `aud` claim among others. https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3",
              "createdAt": "2024-02-23T14:58:30Z",
              "updatedAt": "2024-02-23T14:58:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJhq0",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-23T15:02:10Z",
          "updatedAt": "2024-02-23T15:02:10Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Yes, this is addressing the case where a entity needs to obtain a transaction token and there is not \"inbound\" token. For example, a mail delivery service that receives a new email from the internet. That service could request a transaction token where the `subject_token` is the inbound email address. \r\n\r\nGiven that the `sub` claim of the Txn-Token is REQUIRED, I think we want `subject_token` to also be required.",
              "createdAt": "2024-02-23T15:02:10Z",
              "updatedAt": "2024-02-23T15:02:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJinQ",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-23T15:03:58Z",
          "updatedAt": "2024-02-23T15:03:58Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "As for the comma rule... my understanding of current rules is that it's optional before the last option :) ",
              "createdAt": "2024-02-23T15:03:58Z",
              "updatedAt": "2024-02-23T15:03:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJ5dF",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-23T15:48:24Z",
          "updatedAt": "2024-02-23T15:48:24Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "True, the aud claim can have multiple or single values. Although I still think that implementations around overloaded value types tend to be a bit more complex, those implementations can be reused when dealing with the req_wl overload as well. So I consider this as resolved as well.",
              "createdAt": "2024-02-23T15:48:24Z",
              "updatedAt": "2024-02-23T15:48:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJ6X4",
          "commit": {
            "abbreviatedOid": "d07dde6"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-23T15:50:19Z",
          "updatedAt": "2024-02-23T15:50:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOJt_WwM5qKgp7",
      "title": "add link to github and editor's draft",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/73",
      "state": "MERGED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "closes #72",
      "createdAt": "2024-03-20T00:44:05Z",
      "updatedAt": "2024-03-20T01:35:48Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "5f8197ca32747537775b0353b1aeb30f24aa68f7",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "aaronpk-patch-1",
      "headRefOid": "34f405e76c26bad0718dc6aaa468d1e4a8a83c44",
      "closedAt": "2024-03-20T01:35:47Z",
      "mergedAt": "2024-03-20T01:35:47Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "8c5fe0358d339a401bc3509392783ff1ec712545"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM50GW8l",
          "commit": {
            "abbreviatedOid": "34f405e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-20T01:35:41Z",
          "updatedAt": "2024-03-20T01:35:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOJt_WwM5qKkzO",
      "title": "Section 6 - Cardinality of txn-token services",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/75",
      "state": "MERGED",
      "author": "dhs-aws",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Changed MUST to MAY.  Cardinality of the txn-token service is 0..1, not exactly one.  \r\n\r\nMAY not be the appropriate framing, I'm open to alternative text here to describe this more correctly.",
      "createdAt": "2024-03-20T00:53:33Z",
      "updatedAt": "2024-03-26T22:54:54Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "5f8197ca32747537775b0353b1aeb30f24aa68f7",
      "headRepository": "dhs-aws/oauth-transaction-tokens",
      "headRefName": "patch-1",
      "headRefOid": "cd1a3a0aaa43b378780099330602615f18fdfd5a",
      "closedAt": "2024-03-26T22:54:54Z",
      "mergedAt": "2024-03-26T22:54:54Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "c3daba2b30dd97694e437d156a347ad28c628010"
      },
      "comments": [
        {
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've updated the PR with the language provided by @tulshi in two places where the previous language was found in the draft.",
          "createdAt": "2024-03-26T22:52:57Z",
          "updatedAt": "2024-03-26T22:52:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM50GWzW",
          "commit": {
            "abbreviatedOid": "b7e36a9"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-20T01:34:30Z",
          "updatedAt": "2024-03-20T01:34:30Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm not very familiar with the distinction here, but is there an optionality implied in the word \"MAY\"? I guess the intent is to say \"one and only one logical Txn-Token Service\"",
              "createdAt": "2024-03-20T01:34:30Z",
              "updatedAt": "2024-03-20T01:34:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM50G1Ki",
          "commit": {
            "abbreviatedOid": "b7e36a9"
          },
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-20T05:01:02Z",
          "updatedAt": "2024-03-20T05:01:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Perhaps the language should read, \"...MUST have at most one logical Txn-Token session\"",
              "createdAt": "2024-03-20T05:01:02Z",
              "updatedAt": "2024-03-20T05:01:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM50Q8-t",
          "commit": {
            "abbreviatedOid": "b7e36a9"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T01:51:06Z",
          "updatedAt": "2024-03-21T01:51:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Should we say \"Each Trust Domain that uses Txn-Tokens MUST have exactly one logical Txn-Token Service.\"?",
              "createdAt": "2024-03-21T01:51:06Z",
              "updatedAt": "2024-03-21T01:51:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM508B6w",
          "commit": {
            "abbreviatedOid": "b7e36a9"
          },
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-26T22:49:37Z",
          "updatedAt": "2024-03-26T22:49:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "That language works for me, @tulshi.  ",
              "createdAt": "2024-03-26T22:49:37Z",
              "updatedAt": "2024-03-26T22:49:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM508DBb",
          "commit": {
            "abbreviatedOid": "cd1a3a0"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T22:54:01Z",
          "updatedAt": "2024-03-26T22:54:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOJt_WwM5qugt-",
      "title": "editorial fixes identified by Yaron",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/85",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-26T01:19:17Z",
      "updatedAt": "2024-03-26T16:41:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8c5fe0358d339a401bc3509392783ff1ec712545",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "editorial-fixes",
      "headRefOid": "27087b77651cc7391416223c4ad32900381943d2",
      "closedAt": "2024-03-26T16:41:09Z",
      "mergedAt": "2024-03-26T16:41:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d133905578230d02810a8ed0c4864801bf42aa0e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM501Zcd",
          "commit": {
            "abbreviatedOid": "27087b7"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T12:02:42Z",
          "updatedAt": "2024-03-26T12:02:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM504_dt",
          "commit": {
            "abbreviatedOid": "27087b7"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T16:40:25Z",
          "updatedAt": "2024-03-26T16:40:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOJt_WwM5rKh5h",
      "title": "Addressed privacy changes identified by Yaron",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/86",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-29T13:03:55Z",
      "updatedAt": "2024-03-29T16:00:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "c3daba2b30dd97694e437d156a347ad28c628010",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "privacy-changes",
      "headRefOid": "3553120a152dd050cf12db65fa7b865d344128d5",
      "closedAt": "2024-03-29T16:00:10Z",
      "mergedAt": "2024-03-29T16:00:10Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "cb64104423637c8540f066c9b73532ce5f3492fb"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll create a new issue to track that logging concern ",
          "createdAt": "2024-03-29T16:00:03Z",
          "updatedAt": "2024-03-29T16:00:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM51Vu15",
          "commit": {
            "abbreviatedOid": "3553120"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm ok with these changes. I think we could give some more advise around logging that could be useful to the industry. ",
          "createdAt": "2024-03-29T14:15:36Z",
          "updatedAt": "2024-03-29T14:15:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOJt_WwM5rKl-m",
      "title": "Clarified responsibilities of Txn-Token Service in",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/87",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "a replacement request. Removed vague language",
      "createdAt": "2024-03-29T13:13:08Z",
      "updatedAt": "2024-05-17T20:17:53Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "c3daba2b30dd97694e437d156a347ad28c628010",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "Issue-82-fixes",
      "headRefOid": "744e8d1bdd2e9e8731c1515a7f9e6d535edd59e9",
      "closedAt": "2024-05-17T20:17:52Z",
      "mergedAt": "2024-05-17T20:17:52Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "cc5bcd361519b59629a79f4e329599998ca4d64b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM51Vvd6",
          "commit": {
            "abbreviatedOid": "9048636"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-29T14:17:38Z",
          "updatedAt": "2024-03-29T14:17:39Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I think we need to add that the previously identified requesting workload MUST NOT be modified as well. Thoughts?",
              "createdAt": "2024-03-29T14:17:39Z",
              "updatedAt": "2024-03-29T14:17:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM51imto",
          "commit": {
            "abbreviatedOid": "9048636"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-01T19:47:45Z",
          "updatedAt": "2024-04-01T19:47:45Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Added a line to say that. PTAL",
              "createdAt": "2024-04-01T19:47:45Z",
              "updatedAt": "2024-04-01T19:47:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57CnqS",
          "commit": {
            "abbreviatedOid": "744e8d1"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-05-17T19:49:45Z",
          "updatedAt": "2024-05-17T19:49:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOJt_WwM5rMo9Y",
      "title": "Update draft-ietf-oauth-transaction-tokens.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/89",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses text regarding the `aud` claim throughout the document. Issue #76",
      "createdAt": "2024-03-29T19:38:04Z",
      "updatedAt": "2024-05-17T21:04:05Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "cc5bcd361519b59629a79f4e329599998ca4d64b",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "aud-text-cleanup",
      "headRefOid": "c549135ec5fa6068757ccd017937b1df4efa5b03",
      "closedAt": "2024-05-17T21:04:05Z",
      "mergedAt": "2024-05-17T21:04:05Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "38acb3eca471dd87dcfff4c4ae0db5a5c4bc380d"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Although your changes sufficiently capture what is needed, what I liked about the previous draft is that it clearly identified that each Trust Domain MUST have a unique identifier, which is set as the `aud` value. I wonder if we can say that somewhere (outside of the Terminology section)",
          "createdAt": "2024-03-29T21:18:07Z",
          "updatedAt": "2024-03-29T21:18:07Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, let me see if there is a good place to add that. I wonder if it will be easier to merge PR #90 first and then let me fix this one as there may be conflicts?",
          "createdAt": "2024-04-26T22:10:52Z",
          "updatedAt": "2024-04-26T22:10:52Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes sense to work on this after we merge #90\r\n\r\nOn Fri, Apr 26, 2024 at 3:11\u202fPM George Fletcher ***@***.***>\r\nwrote:\r\n\r\n> Ok, let me see if there is a good place to add that. I wonder if it will\r\n> be easier to merge PR #90\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/90> first and\r\n> then let me fix this one as there may be conflicts?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/89#issuecomment-2080179762>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG77Y2GZKFE7FSVPC7LY7LGIFAVCNFSM6AAAAABFO22ZLKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDAOBQGE3TSNZWGI>\r\n> .\r\n> You are receiving this because your review was requested.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-04-30T21:14:35Z",
          "updatedAt": "2024-04-30T21:14:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM57CyXx",
          "commit": {
            "abbreviatedOid": "767448e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T20:20:17Z",
          "updatedAt": "2024-05-17T20:20:27Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Did you intend for \"trust boundary\" to be something separaet from \"trust domain\"? I'd rather not invoke an additional concept if we can avoid it.",
              "createdAt": "2024-05-17T20:20:17Z",
              "updatedAt": "2024-05-17T20:20:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57C-1O",
          "commit": {
            "abbreviatedOid": "767448e"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T20:51:05Z",
          "updatedAt": "2024-05-17T20:51:05Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Yes, I agree. Let me fix that.",
              "createdAt": "2024-05-17T20:51:05Z",
              "updatedAt": "2024-05-17T20:51:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57DBdT",
          "commit": {
            "abbreviatedOid": "767448e"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T21:01:27Z",
          "updatedAt": "2024-05-17T21:01:27Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Updated",
              "createdAt": "2024-05-17T21:01:27Z",
              "updatedAt": "2024-05-17T21:01:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57DCxa",
          "commit": {
            "abbreviatedOid": "c549135"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-17T21:03:53Z",
          "updatedAt": "2024-05-17T21:03:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOJt_WwM5sgw-l",
      "title": "specified language for self-signed JWTs as subject_tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/90",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-04-12T16:48:40Z",
      "updatedAt": "2024-05-04T01:20:32Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "9a4e2a10383b263f43ae2cc0f064824873481ca7",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "self-signed-tokens",
      "headRefOid": "575c9eae6609db7460f8be46eabb4b80692fa02f",
      "closedAt": "2024-05-04T01:20:31Z",
      "mergedAt": "2024-05-04T01:20:31Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "57c8e30da70c3a026c5b51f5407432cce75d4a9e"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yup. Thanks. I realized I forgot to add the IANA section after I sent out\r\nthe PR. I'll update it soon.\r\n\r\nOn Fri, Apr 19, 2024, 6:30\u202fAM Yaron Sheffer ***@***.***>\r\nwrote:\r\n\r\n> ***@***.**** commented on this pull request.\r\n> ------------------------------\r\n>\r\n> In draft-ietf-oauth-transaction-tokens.md\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/90#discussion_r1572377478>\r\n> :\r\n>\r\n> >\r\n> -rfc9068\r\n> -: The `subject_token` is a JWT format OAuth 2.0 Access Token as defined in {{RFC9068}}\r\n> +`urn:ietf:params:txn-token:token-type:self-signed`\r\n>\r\n> I'm pretty sure you need an IANA section to register\r\n> urn:ietf:params:txn-token.\r\n>\r\n> Hint: https://www.iana.org/assignments/params/params.xhtml\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/90#pullrequestreview-2011438609>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG5Q3BQQWGMFVDMGJUDY6EL6NAVCNFSM6AAAAABGEOTLE6VHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZDAMJRGQZTQNRQHE>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-04-19T15:06:34Z",
          "updatedAt": "2024-04-19T15:06:34Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "body": "@yaronf Regarding your comment about wrong approach: I mentioned something along those lines as well. I personally don't think that a new token type is actually necessary. A JWT is a good fit as it can carry the necessary data, but whether it should be signed by the workload (or what additional claims and associated checks should be incorporated) could be a decision by the individual TTS/trust domain.",
          "createdAt": "2024-04-25T10:17:10Z",
          "updatedAt": "2024-04-25T10:17:10Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "NONE",
          "body": "> @yaronf Regarding your comment about wrong approach: I mentioned something along those lines as well. I personally don't think that a new token type is actually necessary. A JWT is a good fit as it can carry the necessary data, but whether it should be signed by the workload (or what additional claims and associated checks should be incorporated) could be a decision by the individual TTS/trust domain.\r\n\r\n@obfuscoder My point is that even the JWT structure/encoding is not needed. No need to sign anything, no need to encode stuff in base64 (and either of them adds potential security issues). All the semantics we need can be carried in a simple JSON object.",
          "createdAt": "2024-04-25T13:55:03Z",
          "updatedAt": "2024-04-25T13:55:03Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I tend to agree with Yaron, that perhaps self-signed JWTs aren't the best\r\nway to express this. We can discuss this on the call tomorrow.\r\n\r\nOn Thu, Apr 25, 2024 at 6:55\u202fAM Yaron Sheffer ***@***.***>\r\nwrote:\r\n\r\n> @yaronf <https://github.com/yaronf> Regarding your comment about wrong\r\n> approach: I mentioned something along those lines as well. I personally\r\n> don't think that a new token type is actually necessary. A JWT is a good\r\n> fit as it can carry the necessary data, but whether it should be signed by\r\n> the workload (or what additional claims and associated checks should be\r\n> incorporated) could be a decision by the individual TTS/trust domain.\r\n>\r\n> @obfuscoder <https://github.com/obfuscoder> My point is that even the JWT\r\n> structure/encoding is not needed. No need to sign anything, no need to\r\n> encode stuff in base64 (and either of them adds potential security issues).\r\n> All the semantics we need can be carried in a simple JSON object.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/90#issuecomment-2077255417>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG3R5BUBBQW55C32VOLY7EDM3AVCNFSM6AAAAABGEOTLE6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDANZXGI2TKNBRG4>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-04-25T23:31:32Z",
          "updatedAt": "2024-04-25T23:31:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given the requirement that the TTS/AS always has to authenticate the identity of the requesting workload, conveying this info in an unsigned thing (the subject token could even contain just plain JSON) would probably be okay. Though it seems like the kind of thing that might lead to mistakes in deployment and resultant security issues. ",
          "createdAt": "2024-04-26T12:45:29Z",
          "updatedAt": "2024-04-26T12:45:29Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Letting the input be any kind of JSON structure feels problematic - not least because of interop. Using a JWT as the container and then putting constraints on it (i.e. a minimal set of supported claims) will help transaction token services in parsing and making some basic determinations about security. \r\n\r\nSelf-signing has pros and cons - we can make it optional for those deployments that have a risk profile that would get additional assurances from it, but as Brian notes, signing is easy to get wrong.",
          "createdAt": "2024-04-26T13:09:33Z",
          "updatedAt": "2024-04-26T13:09:33Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, you'd put some constraints on the JSON content too. I don't see how that'd be any more problematic from an interop perspective. \r\n",
          "createdAt": "2024-04-26T13:30:44Z",
          "updatedAt": "2024-04-26T14:31:01Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "As long as there are some constraints on the format and contents that everyone would expect. Why not just use a JWT at that point though (there are libraries that support it etc)?",
          "createdAt": "2024-04-26T14:17:11Z",
          "updatedAt": "2024-04-26T14:17:11Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "> TBH I think we took the wrong approach here. Instead of defining a new token type and having to ensure it cannot be abused for anything else, we could have had a simple JSON object containing the relevant claims. The object would be carried as a separate, optional parameter. This would be so much simpler for developers and would reduce the attack surface by a ton.\r\n> \r\n> With that said, I can live with the current solution.\r\n\r\n@yaronf On [today's call](https://hackmd.io/@rpc-sec-wg/BJqJZLYW0) we discussed this topic, and while there are valid opinions on both approaches, for now I am keeping the request as a self-signed JWT unless we think this approach is problematic.",
          "createdAt": "2024-04-26T18:51:05Z",
          "updatedAt": "2024-04-26T18:51:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM53GJMh",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:35:51Z",
          "updatedAt": "2024-04-12T17:35:51Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "You might want to reconcile these with how Token Exchange (not particularity well) defines subject_token_type   https://datatracker.ietf.org/doc/html/rfc8693#section-2.1-4.14 and points to https://datatracker.ietf.org/doc/html/rfc8693#TokenTypeIdentifiers about identifiers that sort of implies it has to be a URI and mentions or defines some that can be used \r\n\r\n",
              "createdAt": "2024-04-12T17:35:51Z",
              "updatedAt": "2024-04-12T17:37:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GMmT",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:44:40Z",
          "updatedAt": "2024-04-12T17:44:40Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Oh and note Aaron's draft use of the `urn:ietf:params:oauth:token-type:id_token` URI for id tokens https://www.ietf.org/archive/id/draft-parecki-oauth-identity-assertion-authz-grant-00.html#section-5 ",
              "createdAt": "2024-04-12T17:44:40Z",
              "updatedAt": "2024-04-12T17:44:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GNT6",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:46:26Z",
          "updatedAt": "2024-04-12T17:46:26Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I agree with Brian. I think we need to make these URIs. If we want to explicitly support an rfc9068 token then we should define a URI for it. However, if the intent of the `rfc9068` value is to represent an access_token then we should use the value defined within RFC 8693.",
              "createdAt": "2024-04-12T17:46:26Z",
              "updatedAt": "2024-04-12T17:46:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GNU0",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:46:28Z",
          "updatedAt": "2024-04-12T17:46:29Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "RFC 8693 already defines a `subject_token_type` value for this which we should use. That said, `id_tokens` aren't usually authorization tokens and so I worry about explicitly calling it out here. The `id_token` can most definitely define the subject but then there is likely a need to pass in a different token containing the external authorization state. I'd rather we focus on AS generated access tokens and self-signed access tokens (recommended as RFC 9068).",
              "createdAt": "2024-04-12T17:46:28Z",
              "updatedAt": "2024-04-12T17:46:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GNxX",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:47:42Z",
          "updatedAt": "2024-04-12T17:47:42Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Maybe add: \"Note, as defined in RFC8693, the `subject_token_type` must be a URI.",
              "createdAt": "2024-04-12T17:47:42Z",
              "updatedAt": "2024-04-12T17:47:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GN4v",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "See inline comments.",
          "createdAt": "2024-04-12T17:47:58Z",
          "updatedAt": "2024-04-12T17:47:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM53Liax",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-04-14T08:33:47Z",
          "updatedAt": "2024-04-14T08:38:43Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "True, and it means the current document should have an IANA subsection to define it.",
              "createdAt": "2024-04-14T08:33:48Z",
              "updatedAt": "2024-04-14T08:38:43Z"
            },
            {
              "originalPosition": 48,
              "body": "Other subject token types define the semantics of the token, and I think we should do that too. Maybe say (if this is true): \r\n\r\n> The `subject_token` is a self-signed OAuth access token issued by the requesting workload",
              "createdAt": "2024-04-14T08:38:25Z",
              "updatedAt": "2024-04-14T08:38:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53VBQa",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-15T19:32:48Z",
          "updatedAt": "2024-04-15T19:32:48Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "It's really not an OAuth access token though (acknowledging that what actually constitutes an OAuth access token isn't totally clear but calling this an access token would be a stretch and unnecessarily confusing). ",
              "createdAt": "2024-04-15T19:32:48Z",
              "updatedAt": "2024-04-15T19:32:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53V8r8",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-15T21:50:57Z",
          "updatedAt": "2024-04-15T21:50:57Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "@bc-pi OK, but I guess we should qualify this JWT to get interoperability. Should we say what claims are REQUIRED?",
              "createdAt": "2024-04-15T21:50:57Z",
              "updatedAt": "2024-04-15T21:50:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53ctrs",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-16T15:41:15Z",
          "updatedAt": "2024-04-16T15:41:15Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I don't know... I was only trying to politely point out that this thing is not an OAuth access token. ",
              "createdAt": "2024-04-16T15:41:15Z",
              "updatedAt": "2024-04-16T15:41:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53ziFS",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-18T22:05:26Z",
          "updatedAt": "2024-04-18T22:05:26Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Thanks @bc-pi , @gffletch and @yaronf for your feedback here. I've updated the PR. Please take a look. thanks",
              "createdAt": "2024-04-18T22:05:26Z",
              "updatedAt": "2024-04-18T22:05:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM535B4R",
          "commit": {
            "abbreviatedOid": "6a49362"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-19T13:29:52Z",
          "updatedAt": "2024-04-19T13:29:53Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I'm pretty sure you need an IANA section to register `urn:ietf:params:txn-token`.\r\n\r\nHint: https://www.iana.org/assignments/params/params.xhtml",
              "createdAt": "2024-04-19T13:29:53Z",
              "updatedAt": "2024-04-19T13:29:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM539e3D",
          "commit": {
            "abbreviatedOid": "6a49362"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-19T22:09:43Z",
          "updatedAt": "2024-04-19T22:09:43Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I have fixed this (changed to the OAuth namespace and added an IANA registry section.",
              "createdAt": "2024-04-19T22:09:43Z",
              "updatedAt": "2024-04-19T22:09:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53_PQK",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-20T10:18:58Z",
          "updatedAt": "2024-04-20T10:18:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM54ITg6",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-22T17:42:38Z",
          "updatedAt": "2024-04-22T17:42:38Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Are there any RFCs that gives guidance on how to generate a self-signed JWT that we can reference? For example, can we reference RFC 7523?",
              "createdAt": "2024-04-22T17:42:38Z",
              "updatedAt": "2024-04-22T17:42:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54IWHy",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-22T17:48:41Z",
          "updatedAt": "2024-04-22T17:48:41Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Perhaps add:\r\n\r\n\"The subject of this token will be the subject of the security token issued in response to the request.\" (RFC 8693 has similar terminology)",
              "createdAt": "2024-04-22T17:48:41Z",
              "updatedAt": "2024-04-22T17:48:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54IW8K",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-22T17:50:40Z",
          "updatedAt": "2024-04-22T17:50:40Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "It MAY be any of the subject token types described in Section 3 of OAuth 2.0 Token Exchange {{RFC8693}} except for the Refresh Token type (i.e., `urn:ietf:params:oauth:token-type:refresh_token`), or it MAY be set to the value:",
              "createdAt": "2024-04-22T17:50:40Z",
              "updatedAt": "2024-04-22T17:50:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54Jw3A",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-22T21:21:13Z",
          "updatedAt": "2024-04-22T21:21:15Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I didn't see any RFCs specific to self-signed JWTs. Referring to RFC7523 is probably not appropriate because of the additional constraints that RFC puts on the content of the JWT, which may not be what we intend here.",
              "createdAt": "2024-04-22T21:21:14Z",
              "updatedAt": "2024-04-22T21:21:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54NUV3",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T09:40:54Z",
          "updatedAt": "2024-04-23T09:40:54Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@tulshi I think there are already implied constraints on what should be in the token *e.g. a \"sub\" claim, and \"iss\" claim that is the same as the \"sub\", \"exp\", \"nbf\", etc. Making it explicit makes implementors lives easier, and improves interop. Looking at RFC 7523 Section 3 defines a set of claims https://www.rfc-editor.org/rfc/rfc7523.html#section-3 that feels highly relevant. Leaving it undefined creates an interop problem.\r\n\r\n@bc-pi and @gffletch what are your thoughts on being more prescriptive on the format of the self-signed token? Can we leverage Section 3 of RFC 7523, or should we define our own?",
              "createdAt": "2024-04-23T09:40:54Z",
              "updatedAt": "2024-04-23T09:40:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54QRgG",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T15:00:59Z",
          "updatedAt": "2024-04-23T15:27:51Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Instead of \"in lieu\" could you please use a more well-known English phrase?",
              "createdAt": "2024-04-23T15:00:59Z",
              "updatedAt": "2024-04-23T15:27:51Z"
            },
            {
              "originalPosition": 28,
              "body": "The self-signed JWT should be short-living as well. So \"iat\" and \"exp\" should be included. there should probably some guidance on how short those self-sign JWTs should be valid. Could be same as for Txn-Tokens itself or even shorter as the self-signed JWTs here are meant to be used just once. \"aud\" and \"sub\" should be essential with \"aud\" either defining the trust domain (as described elsewhere in the spec) or narrowing down the audience even further to just the TTS by using the StringorURI of the TTS. Providing the \"iss\" claim could help the TTS to look up the necessary JWKS of the signing party.",
              "createdAt": "2024-04-23T15:12:37Z",
              "updatedAt": "2024-04-23T15:27:51Z"
            },
            {
              "originalPosition": 56,
              "body": "Is defining and registering a new token type actually necessary? There is urn:ietf:params:oauth:token-type:jwt",
              "createdAt": "2024-04-23T15:27:06Z",
              "updatedAt": "2024-04-23T15:27:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54Tleb",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T21:56:39Z",
          "updatedAt": "2024-04-23T21:56:39Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\n* `iss`: The unique identifier of the requesting workload. The Txn-Token Service SHALL use this value in determining the `req_wl` value in the Txn-Token issued in response to this request.\r\n```",
              "createdAt": "2024-04-23T21:56:39Z",
              "updatedAt": "2024-04-23T21:56:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54TmQg",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T21:57:55Z",
          "updatedAt": "2024-04-23T21:57:56Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "If we revert to `sub_id` for the main Txn Token, this one would also have to change.",
              "createdAt": "2024-04-23T21:57:55Z",
              "updatedAt": "2024-04-23T21:57:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54TmWv",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-23T21:58:12Z",
          "updatedAt": "2024-04-23T21:58:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM54Tt55",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T22:28:10Z",
          "updatedAt": "2024-04-23T22:28:11Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "> @bc-pi and @gffletch what are your thoughts on being more prescriptive on the format of the self-signed token? Can we leverage Section 3 of RFC 7523, or should we define our own? \r\n\r\nI wouldn't try to reference 7523 directly but maybe consider it (really just the client auth context) as partial inspiration for the claims that would make sense in this context of a self-signed JWT. Looks like @tulshi already started on a definition down in #self-signed-subject-token-type though and notably absent are `aud` and `exp`, which one would expect to see short of some compelling reason (that I'm not seeing). ",
              "createdAt": "2024-04-23T22:28:10Z",
              "updatedAt": "2024-04-23T22:28:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54T6m7",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T23:19:27Z",
          "updatedAt": "2024-04-23T23:19:27Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@bc-pi,  I considered adding `aud` and `exp` in the self-signed JWT, but here are the reasons why I decided not to:\r\n\r\n- At a high-level, I'm thinking of the self-signed JWT in the request as a convenience rather than something that will have a lot of applicability outside of the communication between the requesting service and the TTS.\r\n- We could set the `aud` value to be the TTS, but that is redundant. If we were to somehow hint about the `aud` value in the resulting TraT, that is determined by the TTS, so providing that in the request is inconsequential (and the requester has no control over it). It's possible that the same TTS has multiple trust domains, but there could be other ways for it to distinguish which trust domain it is acting on behalf of, such as a different token exchange endpoint URL.\r\n- Similarly, the `exp` value could be used to indicate the expiration of the request itself, or it could be used as a hint to indicate the lifetime of the resulting TraT. Since we have already noted that a TTS may reject JWTs with an unreasonably old `iat` value, we do not need to specify an `exp` value. If we were to hint about the lifetime of the resulting TraT, I feel the requester would need to know a lot more about the transaction than a typical requester such as a general-purpose API gateway would know. I'd rather that the TTS determine the TraT's `exp` based on its policy and understanding of the actual transaction that is being requested. ",
              "createdAt": "2024-04-23T23:19:27Z",
              "updatedAt": "2024-04-23T23:19:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54Zvjj",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T14:16:38Z",
          "updatedAt": "2024-04-24T14:16:39Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@tulshi I am not so sure about not defining the aud value. Given everything that goes on in he world of token theft, having this extra constraint can help minimise the impact of token replay (stealing a token from one workload and replaying against another transaction token endpoint and so forth). Are there scenarios where we think the workload would not know which transaction token service it will be presenting its self-signed credential to?\r\n\r\nI also recall that we had some constraint that a transaction token cannot be valid for longer than the original token. This raises the question on what the guidance is for expiry if the exp claim is not present as in this case. Section 2.3 is somewhat silent on this, but I think this is a decision for the Authorization service (perhaps something to be made clearer in section 2.3). ",
              "createdAt": "2024-04-24T14:16:38Z",
              "updatedAt": "2024-04-24T14:16:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54WAML",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T07:04:21Z",
          "updatedAt": "2024-04-24T14:28:34Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "If the JWT is considered a convenience to pass the necessary parameters (e.g. subject) to the TTS, why does it have to be a new self-signed type? Wouldn't a JWT be enough then? TTS Implementers could decide if they require signed JWTs or accept plain JWTs.\r\n\r\nIf, on the other hand, there are security considerations, having at least \"exp\" helps in mitigating possible abuse of such a JWT (replay attacks).",
              "createdAt": "2024-04-24T07:04:21Z",
              "updatedAt": "2024-04-24T14:28:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54b4Qz",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T17:56:15Z",
          "updatedAt": "2024-04-24T17:56:15Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Claims like `exp`, `nbf`, `aud`, etc (also constructs like [explicit typing](https://www.rfc-editor.org/rfc/rfc8725.html#name-use-explicit-typing) fwiw) are about out the validity/security of the JWT in the intended context and also preventing misuse in unintended context. They have no bearing on whatever the output of the processes is. Any such bearing would need to be profiled and likely isn't what you'd want anyway. \r\n\r\nNote also that there are no normative processing requirements on `iat`.",
              "createdAt": "2024-04-24T17:56:15Z",
              "updatedAt": "2024-04-24T17:56:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54b433",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T17:57:42Z",
          "updatedAt": "2024-04-24T17:57:42Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "most of these things are not claims ",
              "createdAt": "2024-04-24T17:57:42Z",
              "updatedAt": "2024-04-24T17:57:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54cKSG",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T18:35:29Z",
          "updatedAt": "2024-04-24T18:35:29Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Thanks all, I've added the \"aud\" and \"exp\". Good points all (what was I thinking?). In order to minimize abuse of the self-signed JWT, I've specified that its lifetime should be just a few seconds. Since the Txn-token lifetime will exceed this, I've carved out that exception in \"Txn-Token Lifetime\" section (line 160)",
              "createdAt": "2024-04-24T18:35:29Z",
              "updatedAt": "2024-04-24T18:35:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54dYm4",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T21:25:12Z",
          "updatedAt": "2024-04-24T21:25:12Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "I realize much of this text is preexisting but it'd be good if the PR didn't introduce more misstatements ",
              "createdAt": "2024-04-24T21:25:12Z",
              "updatedAt": "2024-04-24T21:25:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54dttH",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T22:28:12Z",
          "updatedAt": "2024-04-24T22:28:12Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "Created separate PR for tracking this: https://github.com/oauth-wg/oauth-transaction-tokens/pull/92",
              "createdAt": "2024-04-24T22:28:12Z",
              "updatedAt": "2024-04-24T22:28:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54d7Co",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T23:19:56Z",
          "updatedAt": "2024-04-24T23:19:57Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "#92 kinda misses the mark https://github.com/oauth-wg/oauth-transaction-tokens/pull/92#discussion_r1578619029 and the new text here is still problematic ",
              "createdAt": "2024-04-24T23:19:57Z",
              "updatedAt": "2024-04-24T23:19:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54gzxQ",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "yaronf",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "TBH I think we took the wrong approach here. Instead of defining a new token type and having to ensure it cannot be abused for anything else, we could have had a simple JSON object containing the relevant claims. The object would be carried as a separate, optional parameter. This would be so much simpler for developers and would reduce the attack surface by a ton.\r\n\r\nWith that said, I can live with the current solution.",
          "createdAt": "2024-04-25T08:26:50Z",
          "updatedAt": "2024-04-25T08:26:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM54hyLn",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-25T10:25:19Z",
          "updatedAt": "2024-04-25T10:30:50Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "or future?",
              "createdAt": "2024-04-25T10:25:19Z",
              "updatedAt": "2024-04-25T10:30:50Z"
            },
            {
              "originalPosition": 82,
              "body": "\"Expiration time for the request\". It should be expiration time for the JWT. There is nothing said about checking this value by the TTS. I think we should be explicit here that TTS MUST validate this, but also clock skew needs to be addressed. We could also just refer the definition of the already registered claim name by RFC 7519",
              "createdAt": "2024-04-25T10:28:39Z",
              "updatedAt": "2024-04-25T10:30:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54i7vg",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-25T12:57:56Z",
          "updatedAt": "2024-04-25T12:57:56Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Kai is, of course, correct here that it's the expiration time of the JWT not of the request itself. And referring to existing definition of claims (not just exp) where possible and appropriate is likely preferable to (possibly erroneously)  restating/redefining them.",
              "createdAt": "2024-04-25T12:57:56Z",
              "updatedAt": "2024-04-25T12:57:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vOtY",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T18:34:13Z",
          "updatedAt": "2024-04-26T18:34:13Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "This will certainly simplify the current PR, but would it prevent us in future from using the `urn:ietf:params:oauth:token-type:jwt` subject token type for other unanticipated purposes in the request?",
              "createdAt": "2024-04-26T18:34:13Z",
              "updatedAt": "2024-04-26T18:34:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vQiS",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T18:39:12Z",
          "updatedAt": "2024-04-26T18:39:12Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "fixed.",
              "createdAt": "2024-04-26T18:39:12Z",
              "updatedAt": "2024-04-26T18:39:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vRpG",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T18:40:52Z",
          "updatedAt": "2024-04-26T18:40:52Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "fixed.",
              "createdAt": "2024-04-26T18:40:52Z",
              "updatedAt": "2024-04-26T18:40:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vUb6",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T18:48:48Z",
          "updatedAt": "2024-04-26T18:48:48Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "I will address the broader issues with the nomenclature (header, media-type, etc.) in a separate PR (#92). For this PR, I have addressed the language regarding the token type identifier. @bc-pi  Please review if that part is OK.",
              "createdAt": "2024-04-26T18:48:48Z",
              "updatedAt": "2024-04-26T18:48:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vyQC",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T20:09:26Z",
          "updatedAt": "2024-04-26T20:09:26Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "looks OK, thx ",
              "createdAt": "2024-04-26T20:09:26Z",
              "updatedAt": "2024-04-26T20:09:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vyTC",
          "commit": {
            "abbreviatedOid": "52b3fca"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-26T20:09:36Z",
          "updatedAt": "2024-04-26T20:09:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM54wTmP",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "obfuscoder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T22:01:25Z",
          "updatedAt": "2024-04-26T22:01:25Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Good point. I also learned that token-type:jwt more or less defines the format of the token and not the purpose. Than again the name \"token-type:self_signed\" also seems to describe format rather than purpose.\r\n\r\nHow about registering a token type name based on the purpose and maybe avoid having \"signed\" in the type name while still defining the format as JWT with the needed attributes for interop and allow implementers to choose whether they want to require a signed JWT or allow a plain one. If implementers require a signed one, the additional attributes like \"exp\" could make sense to help prevent misuse/abuse. We could make those additional attributes OPTIONAL in the plain version and REQUIRED in the signed one.",
              "createdAt": "2024-04-26T22:01:25Z",
              "updatedAt": "2024-04-26T22:01:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM55JTR_",
          "commit": {
            "abbreviatedOid": "52b3fca"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T20:39:54Z",
          "updatedAt": "2024-04-30T20:39:55Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Line 465 states that the `subject_token` is used to determine the `sub` of the Txn-Token. Is that good enough?",
              "createdAt": "2024-04-30T20:39:54Z",
              "updatedAt": "2024-04-30T20:39:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM55JUFA",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T20:42:03Z",
          "updatedAt": "2024-04-30T20:42:03Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Wrote it as \"MAY be any one of...\"",
              "createdAt": "2024-04-30T20:42:03Z",
              "updatedAt": "2024-04-30T20:42:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM55JUf_",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T20:43:15Z",
          "updatedAt": "2024-04-30T20:43:15Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Removed the additional phrase. The sentence makes sense without it.",
              "createdAt": "2024-04-30T20:43:15Z",
              "updatedAt": "2024-04-30T20:43:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54Kd_E",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Let's go ahead and merge and then file issues if there is stuff we want to change.",
          "createdAt": "2024-04-23T00:28:11Z",
          "updatedAt": "2024-05-01T19:52:10Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Wondering if we should be clearer about non-normative text. Maybe add \"For example, this could ...\"",
              "createdAt": "2024-04-23T00:28:12Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            },
            {
              "originalPosition": 54,
              "body": "Maybe add \"For example, it MAY be any ...\"",
              "createdAt": "2024-04-23T00:32:07Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            },
            {
              "originalPosition": 28,
              "body": "Should we add \"use as a `subject_token` value in its request...\" to make it explicit that the token being referenced is the one that is going to be passed as the subject_token?",
              "createdAt": "2024-04-26T21:59:57Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            },
            {
              "originalPosition": 36,
              "body": "Is the call out for self-signed tokens trying to change the life-time of the transaction token? I don't think that should be the case. The life-time of the transaction-token should be bound to the transaction and its needs and NOT to the time-frame of the token passed as the subject_token. In many ways, I'd want the self-signed subject_token to be extremely short-lived (e.g. 5 seconds) and the resulting transaction-token to have a life-time of say 120 seconds.",
              "createdAt": "2024-04-26T22:04:24Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            },
            {
              "originalPosition": 78,
              "body": "We may want to add somewhere that the TTS should verify that the iss in this subject_token is the same workload identified via the required client authentication. If not the same some additional authorization policy should apply. Generally we don't want the self-signed subject_tokens to be replayable.",
              "createdAt": "2024-04-26T22:07:53Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM55i4PB",
          "commit": {
            "abbreviatedOid": "52b3fca"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-04T01:19:06Z",
          "updatedAt": "2024-05-04T01:19:06Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Before we introduced self-signed JWTs in the request, the inbound tokens were expected to be longer lived. So this sentence said the Txn-Token MUST NOT exceed the lifetime of the inbound token. However, since self-signed JWTs are expected to be much more short-lived (as you mention), we want to carve out an exception for that. That is why I've made this change.",
              "createdAt": "2024-05-04T01:19:06Z",
              "updatedAt": "2024-05-04T01:19:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOJt_WwM5tp-91",
      "title": "clarified fields versus claims and IANA registry name",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/92",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-04-24T22:27:13Z",
      "updatedAt": "2024-06-06T23:55:55Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "38acb3eca471dd87dcfff4c4ae0db5a5c4bc380d",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "fix-iana-language",
      "headRefOid": "172971b810053d26a66cd09d880cfd348b78607f",
      "closedAt": "2024-06-06T23:55:55Z",
      "mergedAt": "2024-06-06T23:55:55Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d4ec023a99e54163f875695bbd63e4d4c81fd283"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM54d50U",
          "commit": {
            "abbreviatedOid": "f7ddfab"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T23:13:47Z",
          "updatedAt": "2024-04-24T23:13:47Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Lots to unpack here that goes beyond changing one word...\r\n\r\nThe referenced section `{{txn-token-header}}` is [JWT Header](https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-01.html#name-jwt-header) which calls headers claims. Headers are not claims. Also the value of the `typ` header is supposed to be a media type so the `txn_token` value probably isn't quite right and the registration for it below certainly isn't right. Also the `urn:ieft:params:oauth:token-type:txn-token` URI is missing a registration and the [Txn-Token Request](https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-01.html#name-txn-token-request) section that defines it has some major formatting issues. \r\n\r\nSome related reading, issues, and examples of these things being done in other specs follows: \r\n\r\nhttps://github.com/oauth-wg/oauth-transaction-tokens/issues/84\r\nhttps://www.rfc-editor.org/rfc/rfc7515#section-4.1.9\r\nhttps://www.rfc-editor.org/rfc/rfc7519#section-5.1\r\nhttps://www.rfc-editor.org/rfc/rfc8725.html#name-use-explicit-typing\r\nhttps://datatracker.ietf.org/doc/html/rfc9068#name-header\r\nhttps://www.rfc-editor.org/rfc/rfc9449.html#name-dpop-proof-jwt-syntax\r\nhttps://www.rfc-editor.org/rfc/rfc7519.html#section-10.2\r\n\r\n ",
              "createdAt": "2024-04-24T23:13:47Z",
              "updatedAt": "2024-04-24T23:13:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57UGgu",
          "commit": {
            "abbreviatedOid": "f7ddfab"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-21T14:50:23Z",
          "updatedAt": "2024-05-21T14:50:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM583i4n",
          "commit": {
            "abbreviatedOid": "f7ddfab"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T21:58:08Z",
          "updatedAt": "2024-06-03T21:58:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm pulling out the misuse of the \"typ\" Header Parameter as a separate issue so that it can be discussed on its own.",
              "createdAt": "2024-06-03T21:58:08Z",
              "updatedAt": "2024-06-03T21:58:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM583kFA",
          "commit": {
            "abbreviatedOid": "f7ddfab"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T22:02:38Z",
          "updatedAt": "2024-06-03T22:02:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/97",
              "createdAt": "2024-06-03T22:02:38Z",
              "updatedAt": "2024-06-03T22:02:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM59Xhbt",
          "commit": {
            "abbreviatedOid": "172971b"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-06T22:35:28Z",
          "updatedAt": "2024-06-06T22:35:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOJt_WwM5t1lm_",
      "title": "fix typo/spellng",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/93",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-04-26T12:28:45Z",
      "updatedAt": "2024-04-26T18:19:58Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "cb64104423637c8540f066c9b73532ce5f3492fb",
      "headRepository": "bc-pi/oauth-transaction-tokens",
      "headRefName": "patch-1",
      "headRefOid": "28217e7b99a6842c19225df6800228c82a4846b1",
      "closedAt": "2024-04-26T18:19:58Z",
      "mergedAt": "2024-04-26T18:19:58Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "9a4e2a10383b263f43ae2cc0f064824873481ca7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM54vJah",
          "commit": {
            "abbreviatedOid": "28217e7"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-26T18:19:52Z",
          "updatedAt": "2024-04-26T18:19:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 98,
      "id": "PR_kwDOJt_WwM5yCa6h",
      "title": "fixed typo ieft->ietf (issue #94)",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/98",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-10T23:36:10Z",
      "updatedAt": "2024-06-14T16:11:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d4ec023a99e54163f875695bbd63e4d4c81fd283",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "fix-typo",
      "headRefOid": "c731481ecf287438850bae9a10cc467f04547848",
      "closedAt": "2024-06-14T16:11:09Z",
      "mergedAt": "2024-06-14T16:11:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d3febe84ae8c544e53af7ef8aeeb79419b151467"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM59tN2z",
          "commit": {
            "abbreviatedOid": "c731481"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-11T00:41:25Z",
          "updatedAt": "2024-06-11T00:41:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 99,
      "id": "PR_kwDOJt_WwM5ywoBH",
      "title": "Added a subsection for the azd  value",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/99",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To address issue #79 ",
      "createdAt": "2024-06-18T00:43:16Z",
      "updatedAt": "2024-06-20T21:30:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "azd-rctx-clarity",
      "headRefOid": "6feaa8d32e1404bf269ecea88e30b41a0d7c1299",
      "closedAt": "2024-06-20T21:30:09Z",
      "mergedAt": "2024-06-20T21:30:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "e8830562c02d0d01523e4b9d3dfff36e1da31cfd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-tA6-",
          "commit": {
            "abbreviatedOid": "2826890"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T14:42:41Z",
          "updatedAt": "2024-06-18T14:42:41Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This looks great. I'm not sure about the \"key-value pairs\" term as the non-normative example has a nested JSON structure. Maybe \"...a JSON object that contains claims, which together...\" to make it a little less specific?",
              "createdAt": "2024-06-18T14:42:41Z",
              "updatedAt": "2024-06-18T14:42:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5-u5GM",
          "commit": {
            "abbreviatedOid": "2826890"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T18:32:31Z",
          "updatedAt": "2024-06-18T18:32:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The [JSON spec](https://datatracker.ietf.org/doc/html/rfc8259#section-1) says that the content of a JSON object are name value pairs, wherein the value can be an object.",
              "createdAt": "2024-06-18T18:32:31Z",
              "updatedAt": "2024-06-18T18:32:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5-u60X",
          "commit": {
            "abbreviatedOid": "2826890"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T18:36:49Z",
          "updatedAt": "2024-06-18T18:36:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I updated the text a bit, but I'm not sure if it will address your issue. Please review.",
              "createdAt": "2024-06-18T18:36:49Z",
              "updatedAt": "2024-06-18T18:36:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5_Akd_",
          "commit": {
            "abbreviatedOid": "6feaa8d"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2024-06-20T16:13:05Z",
          "updatedAt": "2024-06-20T16:13:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOJt_WwM5y1Z0U",
      "title": "Update draft-ietf-oauth-transaction-tokens.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/100",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added text to address issue #74",
      "createdAt": "2024-06-18T14:13:43Z",
      "updatedAt": "2024-06-21T18:09:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "sec-replace-txn",
      "headRefOid": "66fac7c1ace9f75c967ba6ed361c3760f4bfeb90",
      "closedAt": "2024-06-21T18:09:10Z",
      "mergedAt": "2024-06-21T18:09:10Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "7d004dd6444511ad0be17d395be56a4b1dab5e60"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-u76K",
          "commit": {
            "abbreviatedOid": "cd45864"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T18:39:34Z",
          "updatedAt": "2024-06-18T18:45:15Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Ony -> Only\r\nmay -> MAY (?)\r\nadd comma after \"may be trusted\"\r\n",
              "createdAt": "2024-06-18T18:39:34Z",
              "updatedAt": "2024-06-18T18:45:15Z"
            },
            {
              "originalPosition": 23,
              "body": "I'm a bit conflicted about the last sentence. The rest of this paragraph applies to any service, whereas the last sentence applies only to the TTS. Should we have a separate \"security considerations\" subsection for TTSes?",
              "createdAt": "2024-06-18T18:42:31Z",
              "updatedAt": "2024-06-18T18:45:15Z"
            },
            {
              "originalPosition": 25,
              "body": "Should we change this title to \"Scope and Purpose processing\" to avoid confusion?",
              "createdAt": "2024-06-18T18:43:41Z",
              "updatedAt": "2024-06-18T18:45:15Z"
            },
            {
              "originalPosition": 26,
              "body": "make -> makes",
              "createdAt": "2024-06-18T18:44:37Z",
              "updatedAt": "2024-06-18T18:45:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5-vcQR",
          "commit": {
            "abbreviatedOid": "cd45864"
          },
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2024-06-18T19:56:10Z",
          "updatedAt": "2024-06-18T19:56:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5_Ah74",
          "commit": {
            "abbreviatedOid": "cd45864"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T16:07:47Z",
          "updatedAt": "2024-06-20T16:07:47Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Yeah... I will remove that last sentence and then we can maybe add another section of validating tokens either TTS specific or even for receiving workloads.",
              "createdAt": "2024-06-20T16:07:47Z",
              "updatedAt": "2024-06-20T16:07:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5_CtUV",
          "commit": {
            "abbreviatedOid": "66fac7c"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-20T21:29:39Z",
          "updatedAt": "2024-06-20T21:29:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOJt_WwM5y1d6V",
      "title": "Updated text on `txn` claim",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/101",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added text to address issue #77 regarding the value of the `txn` claim within the Txn-Token",
      "createdAt": "2024-06-18T14:22:04Z",
      "updatedAt": "2024-06-20T16:10:47Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "txn-optional",
      "headRefOid": "2e332e8cf65db24b0e95bc4670cf5239a6ada991",
      "closedAt": "2024-06-20T16:10:31Z",
      "mergedAt": "2024-06-20T16:10:31Z",
      "mergedBy": "gffletch",
      "mergeCommit": {
        "oid": "17c4691d651509b0dc11a590d36ab15dfc7d52ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-u7nE",
          "commit": {
            "abbreviatedOid": "2e332e8"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-18T18:38:52Z",
          "updatedAt": "2024-06-18T18:38:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDOJt_WwM5y1lBk",
      "title": "Clarified the `purp` claim",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/102",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added a section to clarify the intent of the `purp` claim and how it is different from scope values addressing issue #78.",
      "createdAt": "2024-06-18T14:36:36Z",
      "updatedAt": "2024-06-20T16:11:25Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "purp-clarification",
      "headRefOid": "6347600c0e1951d24923da2bdfb0def544b1e1d7",
      "closedAt": "2024-06-20T16:11:17Z",
      "mergedAt": "2024-06-20T16:11:17Z",
      "mergedBy": "gffletch",
      "mergeCommit": {
        "oid": "c11cc2df589c817a066a7daa72815d7ba8fae7e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-u7db",
          "commit": {
            "abbreviatedOid": "6347600"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-18T18:38:29Z",
          "updatedAt": "2024-06-18T18:38:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 103,
      "id": "PR_kwDOJt_WwM5zA--Z",
      "title": "changing OAuth URI subregistry entry for Txn-Tokens to be txn_token",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/103",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We currently use the URI: \"urn:ietf:params:oauth:token-type:txn-token\" to denote a Txn-Token in requests or in the token itself. However, if I look at other entries in the OAuth URI Subregistry here (https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml#uri), they use the \"_token\" style for the token types. We also use that style when the subject-token-type is \"self_signed\". So I'd like to propose that we use the URI: \"urn:ietf:params:oauth:token-type:txn_token\" for the transaction token URI.",
      "createdAt": "2024-06-20T01:48:49Z",
      "updatedAt": "2024-06-20T17:02:20Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "fix-token-type",
      "headRefOid": "f437015f5789969ce423649405b3ee789cc2595d",
      "closedAt": "2024-06-20T17:02:20Z",
      "mergedAt": "2024-06-20T17:02:20Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "15045bf7b3dda66dd648883ae3f3a3eb268eaebc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-91gC",
          "commit": {
            "abbreviatedOid": "f437015"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Agreed with aligning to the common practices elsewhere.",
          "createdAt": "2024-06-20T11:11:50Z",
          "updatedAt": "2024-06-20T11:11:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5_Ad2I",
          "commit": {
            "abbreviatedOid": "f437015"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-20T16:00:10Z",
          "updatedAt": "2024-06-20T16:00:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOJt_WwM5zNzYE",
      "title": "draft02 files for submission. I have performed the IDNits check, and \u2026",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/104",
      "state": "OPEN",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026the only issue is that there are non-ascii characters",
      "createdAt": "2024-06-21T19:12:03Z",
      "updatedAt": "2024-06-28T17:57:18Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "7d004dd6444511ad0be17d395be56a4b1dab5e60",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "prep-for-submission",
      "headRefOid": "fb81168c371f5bb3bb233f526788f67907d2a1b7",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6AEcyL",
          "commit": {
            "abbreviatedOid": "fb81168"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Not sure while the entire doc is shown as green. Approving.",
          "createdAt": "2024-06-28T17:57:18Z",
          "updatedAt": "2024-06-28T17:57:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 105,
      "id": "PR_kwDOJt_WwM5zjuKe",
      "title": "Added HTTP Header registration requirements",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/105",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-25T23:11:34Z",
      "updatedAt": "2024-07-04T00:56:21Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "95f9bdcd0e539c697a05b74a7a3a407834b9f439",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-header-iana",
      "headRefOid": "a01b7f975573407c2b960c8692cb5ea0355d1dbe",
      "closedAt": "2024-07-04T00:56:19Z",
      "mergedAt": "2024-07-04T00:56:19Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "6f7b57d26b721974a403231d27414e1943679372"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> Brian Campbell 7:28 AM a new header is not the same thing as a new HTTP Authentication Scheme and there seems to be some conflation of things here\r\n\r\nSwitched to defining a new HTTP header.",
          "createdAt": "2024-06-26T18:30:04Z",
          "updatedAt": "2024-06-26T18:30:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5_rjhI",
          "commit": {
            "abbreviatedOid": "46a1d23"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-26T14:48:42Z",
          "updatedAt": "2024-06-26T14:48:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5_r_QW",
          "commit": {
            "abbreviatedOid": "46a1d23"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Atul Tulshibagwale\r\n  5:14 PM\r\nAdded a section that will help register Txn-Token as a new HTTP Authentication Scheme, when this draft progress to WGLC: https://github.com/oauth-wg/oauth-transaction-tokens/pull/105. Please review!\r\n[#105 Added HTTP Authentication Scheme registration requirements](https://github.com/oauth-wg/oauth-transaction-tokens/pull/105)\r\n<https://github.com/[oauth-wg/oauth-transaction-tokens](https://github.com/oauth-wg/oauth-transaction-tokens)|oauth-wg/oauth-transaction-tokens>oauth-wg/oauth-transaction-tokens | Yesterday at 5:11 PM | Added by [GitHub](https://ietf.slack.com/services/B058XLB1MMY)\r\n\r\n\r\nBrian Campbell\r\n  7:28 AM\r\na new header is not the same thing as a new HTTP Authentication Scheme and there seems to be some conflation of things here",
          "createdAt": "2024-06-26T15:30:48Z",
          "updatedAt": "2024-06-26T15:30:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6AEeVt",
          "commit": {
            "abbreviatedOid": "e41a344"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T18:00:31Z",
          "updatedAt": "2024-06-28T18:00:31Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "typo ... use -> used",
              "createdAt": "2024-06-28T18:00:31Z",
              "updatedAt": "2024-06-28T18:00:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6AEenq",
          "commit": {
            "abbreviatedOid": "e41a344"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Left a minor comment. I'm good though I suspect Brian is the review that will be most helpful :) ",
          "createdAt": "2024-06-28T18:01:07Z",
          "updatedAt": "2024-06-28T18:01:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6AcB6I",
          "commit": {
            "abbreviatedOid": "e41a344"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T20:38:06Z",
          "updatedAt": "2024-07-02T20:38:06Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "> typo ... use -> used \r\n\r\nthat and one other spelling thing\r\n\r\n```suggestion\r\n* Comment: The `Authorization` header cannot be used for Txn-tokens because that may be used for service-to-service authorization, and the services may simultaneously require the use of Txn-tokens to convey detailed immutable information such as user identity and details of fine-grained authorization that are included in the Txn-token.\r\n```",
              "createdAt": "2024-07-02T20:38:06Z",
              "updatedAt": "2024-07-02T20:38:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 106,
      "id": "PR_kwDOJt_WwM5z1MFN",
      "title": "Mnr typos",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/106",
      "state": "MERGED",
      "author": "adeinega",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-27T23:36:33Z",
      "updatedAt": "2024-07-02T21:04:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "7d004dd6444511ad0be17d395be56a4b1dab5e60",
      "headRepository": "adeinega/oauth-transaction-tokens",
      "headRefName": "patch-1",
      "headRefOid": "2325b94b26bfaef3712a04f084a12a33d0aaa563",
      "closedAt": "2024-07-02T21:04:06Z",
      "mergedAt": "2024-07-02T21:04:06Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "95f9bdcd0e539c697a05b74a7a3a407834b9f439"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6AEdbv",
          "commit": {
            "abbreviatedOid": "2325b94"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you for the careful read!",
          "createdAt": "2024-06-28T17:58:32Z",
          "updatedAt": "2024-06-28T17:58:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6AcLg7",
          "commit": {
            "abbreviatedOid": "2325b94"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-02T21:03:21Z",
          "updatedAt": "2024-07-02T21:03:21Z",
          "comments": []
        }
      ]
    }
  ]
}